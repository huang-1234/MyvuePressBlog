(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{490:function(t,s,a){"use strict";a.r(s);var e=a(45),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"常用工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用工具"}},[t._v("#")]),t._v(" 常用工具")]),t._v(" "),a("p",[t._v("util 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心 JavaScript 的功能 过于精简的不足。")]),t._v(" "),a("p",[t._v("使用方法如下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" util "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'util'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"util-callbackify"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#util-callbackify"}},[t._v("#")]),t._v(" util.callbackify")]),t._v(" "),a("p",[a("strong",[t._v("util.callbackify(original)")]),t._v(" 将 "),a("code",[t._v("async")]),t._v(" 异步函数（或者一个返回值为 "),a("code",[t._v("Promise")]),t._v(" 的函数）转换成遵循异常优先的回调风格的函数，例如将 "),a("code",[t._v("(err, value) => ...")]),t._v(" 回调作为最后一个参数。 在回调函数中，第一个参数为拒绝的原因（如果 "),a("code",[t._v("Promise")]),t._v(" 解决，则为 "),a("code",[t._v("null")]),t._v("），第二个参数则是解决的值。")]),t._v(" "),a("h2",{attrs:{id:"util-inherits"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#util-inherits"}},[t._v("#")]),t._v(" util.inherits")]),t._v(" "),a("p",[a("strong",[t._v("util.inherits(constructor, superConstructor)")]),t._v(" 是一个实现对象间原型继承的函数。")]),t._v(" "),a("p",[t._v("JavaScript 的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript 没有提供对象继承的语言级别特性，而是通过原型复制来实现的。")]),t._v(" "),a("p",[t._v("在这里我们只介绍 util.inherits 的用法")]),t._v(" "),a("h2",{attrs:{id:"util-inspect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#util-inspect"}},[t._v("#")]),t._v(" util.inspect")]),t._v(" "),a("p",[a("strong",[t._v("util.inspect(object,[showHidden],[depth],[colors])")]),t._v(" 是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。它至少接受一个参数 object，即要转换的对象。")]),t._v(" "),a("p",[t._v("showHidden 是一个可选参数，如果值为 true，将会输出更多隐藏信息。")]),t._v(" "),a("p",[t._v("depth 表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多 少。如果不指定depth，默认会递归 2 层，指定为 null 表示将不限递归层数完整遍历对象。 如果 colors 值为 true，输出格式将会以 ANSI 颜色编码，通常用于在终端显示更漂亮 的效果。")]),t._v(" "),a("p",[t._v("特别要指出的是，util.inspect 并不会简单地直接把对象转换为字符串，即使该对 象定义了 toString 方法也不会调用。")]),t._v(" "),a("h2",{attrs:{id:"util-isarray-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#util-isarray-object"}},[t._v("#")]),t._v(" util.isArray(object)")]),t._v(" "),a("p",[t._v('如果给定的参数 "object" 是一个数组返回 true，否则返回 false。')]),t._v(" "),a("h2",{attrs:{id:"util-isregexp-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#util-isregexp-object"}},[t._v("#")]),t._v(" util.isRegExp(object)")]),t._v(" "),a("p",[t._v('如果给定的参数 "object" 是一个正则表达式返回true，否则返回false。')]),t._v(" "),a("h2",{attrs:{id:"util-isdate-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#util-isdate-object"}},[t._v("#")]),t._v(" util.isDate(object)")]),t._v(" "),a("p",[t._v('如果给定的参数 "object" 是一个日期返回true，否则返回false。')])])}),[],!1,null,null,null);s.default=r.exports}}]);