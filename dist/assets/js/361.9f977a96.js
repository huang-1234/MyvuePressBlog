(window.webpackJsonp=window.webpackJsonp||[]).push([[361],{871:function(t,e,r){"use strict";r.r(e);var a=r(6),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"error"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#error"}},[t._v("#")]),t._v(" error")]),t._v(" "),r("h2",{attrs:{id:"fatal-refusing-to-merge-unrelated-histories解决"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#fatal-refusing-to-merge-unrelated-histories解决"}},[t._v("#")]),t._v(" fatal: refusing to merge unrelated histories解决")]),t._v(" "),r("p",[t._v("Git :fatal: refusing to merge unrelated histories解决\n今天本地创建了一个仓库（有README)，把本地仓库和Github上关联以后，发现git pull，git feach提醒fatal: refusing to merge unrelated histories")]),t._v(" "),r("p",[r("img",{attrs:{src:"git0329.assets/20190830090402218.png",alt:"截图示例"}})]),t._v(" "),r("p",[t._v("上网查到原因是两个分支是两个不同的版本，具有不同的提交历史")]),t._v(" "),r("p",[t._v("加一句")]),t._v(" "),r("p",[t._v("$git pull origin master --allow-unrelated-histories\n1\n可以允许不相关历史提，强制合并，确实解决了这个问题，感谢网友")]),t._v(" "),r("h2",{attrs:{id:"git-上传出现-rejected-master-master-non-fast-forward"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-上传出现-rejected-master-master-non-fast-forward"}},[t._v("#")]),t._v(" git 上传出现“ ! [rejected] master -> master (non-fast-forward)”")]),t._v(" "),r("p",[t._v("参考文章：\n"),r("a",{attrs:{href:"https://blog.csdn.net/tiegenz/article/details/79551717",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何将本地项目上传到码云"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://www.cnblogs.com/merray/p/5698331.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("GIT远程仓库地址变更"),r("OutboundLink")],1),t._v("\n[! "),r("a",{attrs:{href:"https://blog.csdn.net/lujinjian605894472/article/details/8443403",target:"_blank",rel:"noopener noreferrer"}},[t._v("rejected] master -> master (non-fast-forward)（有推荐视频）"),r("OutboundLink")],1),t._v("\n在使用Git 配置公司的远程仓库时"),r("code",[t._v("git push origin master")]),t._v("，出现以下问题")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("xu:QProj xiaokai$ git push origin master\nTo https://gitee.com/XXXXX.git\n ! [rejected]        master -> master (non-fast-forward)\nerror: failed to push some refs to 'https://gitee.com/XXXXX.git'\nhint: Updates were rejected because the tip of your current branch is behind\nhint: its remote counterpart. Integrate the remote changes (e.g.\nhint: 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n")])])]),r("p",[t._v("从提示语中可以看出是，问题（Non-fast-forward）的出现原因在于：git仓库中已经有一部分代码，所以它不允许你直接把你的代码覆盖上去。于是你有2个选择方式：")]),t._v(" "),r("p",[t._v("1、强推，即利用强覆盖方式用你本地的代码替代git仓库内的内容，如果远程仓库是刚建的，没有代码，可以这样操作，尽量避免这种操作方法。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("git push -f\n")])])]),r("p",[t._v("2、先把git的东西fetch到你本地然后merge后再push")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("$ git fetch\n")])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("$ git merge\n")])])]),r("p",[t._v("3、在使用的时候，"),r("code",[t._v("git merge")]),t._v("，又出现了以下的问题")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("xu:QProj xiaokai$ git merge\nfatal: refusing to merge unrelated histories\n")])])]),r("p",[t._v("对于这个问题。使用"),r("code",[t._v("git pull origin master --allow-unrelated-histories")]),t._v("\n来处理一下。")]),t._v(" "),r("p",[t._v("4、然后继续"),r("code",[t._v("git merge")]),t._v(",依然有问题")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("fatal: You have not concluded your merge (MERGE_HEAD exists).\nPlease, commit your changes before you merge.\n")])])]),r("p",[t._v("这个就好处理了，是我们没有提交当前的变化， "),r("code",[t._v("git add .")]),t._v(","),r("code",[t._v('git commit -am "提交信息"')])]),t._v(" "),r("p",[t._v("然后再来一次"),r("code",[t._v("git merge")]),t._v(",然后ok.")]),t._v(" "),r("p",[t._v("5、然后输入"),r("code",[t._v("git pull")]),t._v(",显示如下")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("Already up-to-date.\n")])])]),r("p",[t._v("最后就可以执行"),r("code",[t._v("xu:QProj xiaokai$ git push origin master")]),t._v("\n将代码上传到公司的远程仓库中。")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("xu:QProj xiaokai$ git push origin master\nCounting objects: 693, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (636/636), done.\nWriting objects: 100% (693/693), 2.83 MiB | 570.00 KiB/s, done.\nTotal 693 (delta 362), reused 0 (delta 0)\nremote: Resolving deltas: 100% (362/362), completed with 1 local object.\nremote: Powered by Gitee.com\nTo https://gitee.com/XXXXX.git\n   83902a5..8100890  master -> master\n")])])]),r("h3",{attrs:{id:"git报错解决-openssl-ssl-read-connection-was-reset-errno-10054-错误解决"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git报错解决-openssl-ssl-read-connection-was-reset-errno-10054-错误解决"}},[t._v("#")]),t._v(" ??Git报错解决：OpenSSL SSL_read: Connection was reset, errno 10054 错误解决")]),t._v(" "),r("p",[t._v("*"),r("em",[t._v("首先，造成这个错误很有可能是网络不稳定，连接超时导致的，\n如果再次尝试后依然报错，可以执行下面的命令。")])]),t._v(" "),r("p",[r("strong",[t._v("打开Git命令页面，执行git命令脚本：修改设置，解除ssl验证")])]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('git config --global http.sslVerify "false"\n')])])]),r("p",[t._v("此时，再执行git操作即可。")]),t._v(" "),r("h2",{attrs:{id:"git比较两个分支的文件的差异"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git比较两个分支的文件的差异"}},[t._v("#")]),t._v(" git比较两个分支的文件的差异")]),t._v(" "),r("p",[t._v("Git diff branch1 branch2 --stat   //显示出所有有差异的文件列表")]),t._v(" "),r("p",[t._v("Git diff branch1 branch2 文件名(带路径)   //显示指定文件的详细差异")]),t._v(" "),r("p",[t._v("Git diff branch1 branch2                   //显示出所有有差异的文件的详细差异")]),t._v(" "),r("h2",{attrs:{id:"git-撤销-回退-已经add-commit或push的提交"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-撤销-回退-已经add-commit或push的提交"}},[t._v("#")]),t._v(" Git-撤销（回退）已经add，commit或push的提交")]),t._v(" "),r("p",[t._v("本文只阐述如何解决问题，不会对git的各种概念多做介绍，如果有兴趣可以点击下面的链接，进行详细的学习：\nPro Git")]),t._v(" "),r("p",[t._v("本文适用的环境\n现在先假设几个环境，本文将会给出相应的解决方法：")]),t._v(" "),r("ol",[r("li",[t._v("本地代码（或文件）已经add但是还未commit；")]),t._v(" "),r("li",[t._v("要回退的commit的代码已经commit了，但是还未push到远程个人repository")]),t._v(" "),r("li",[t._v("要回退的commit的代码已经push到远程的个人分支，但是还未merge到公共的repository")]),t._v(" "),r("li",[t._v("要回退的commit的代码已被merge（合入)到公共的repository")])]),t._v(" "),r("p",[t._v("关键的几个命令\ngit reset [commit]\ngit revert [commit]")]),t._v(" "),r("p",[t._v("git reset有三个参数soft,mixed,hard分别对应head的指针移动，index（暂存区）、以及工作目录的修改，当缺省时，默认为mixed参数。\ngit revert与reset的区别是git revert会生成一个新的提交来撤销某次提交，此次提交之前的commit都会被保留，也就是说对于项目的版本历史来说是往前走的。而git reset 则是回到某次提交，类似于穿越时空。")]),t._v(" "),r("p",[t._v("相应的解决方法\n1、 对于上面的前两种情况，我们可以直接使用git reset命令。根据需要的不同使用，不同的参数。但是要注意1.")]),t._v(" "),r("p",[t._v("git reset –hard")]),t._v(" "),r("p",[t._v("是一个危险的命令,他是git少数几个会销毁数据的命令之一，如果你不小心放了错，你也许可以使用")]),t._v(" "),r("p",[t._v("git reflog")]),t._v(" "),r("p",[t._v("命令来找回你的数据。\n2、 对于第三种情况，如果你的远程分支只有你一个人用的话，那么可以在先使用git reset [commit]回退，如何使用git push -f [commit]来强制更新你的远程库2")]),t._v(" "),r("p",[t._v("3、 对于最后一种情况，考虑到其他人的版本历史，使用git reset [commit]是不建议的，此时我们应该使用git revert [commit]改命令不会修改之前的提交历史，相当于对数据做了一次逆操作，然后再执行add，commit等命令。")]),t._v(" "),r("p",[t._v("总结\n对于前三种情况，虽然git revert也适用，但是如要要保持版本历史干净的话，建议还是用 git reset3，但是希望保留完整的历史的话，还是使用git revert为好。对于和其他人协同的项目，使用git rever是最好的。")]),t._v(" "),r("p",[t._v("对于第一种情况 如果只是想修改commit的内容的话，可以使用git commit –amend ↩\n[commit]表示所需要回退到的目标commit的SHA。 ↩\n对于有些情况而言，git checkout [commit]也可以达到同样的效果，但是最好避免这样有歧义的使用方式")])])}),[],!1,null,null,null);e.default=s.exports}}]);