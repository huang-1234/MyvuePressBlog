(window.webpackJsonp=window.webpackJsonp||[]).push([[466],{975:function(t,e,n){"use strict";n.r(e);var s=n(6),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"事件总线"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件总线"}},[t._v("#")]),t._v(" 事件总线")]),t._v(" "),n("p",[t._v("EventBus 又称为事件总线。在Vue中可以使用 EventBus 来作为组件传递数据的桥梁的，就像是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件，所以组件都可以上下平行地通知其他组件，但也就是太方便所以若使用不慎，就会造成难以维护的灾难，因此才需要更完善的Vuex作为状态管理中心，将通知的概念上升到共享状态层次。")]),t._v(" "),n("blockquote",[n("p",[t._v("官方推荐的状态管理方案是 Vuex。不过如果项目不是很大，状态管理也没有很复杂的话，使用 Vuex 没必要。")])]),t._v(" "),n("h2",{attrs:{id:"使用-eventbus"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-eventbus"}},[t._v("#")]),t._v(" 使用 EventBus")]),t._v(" "),n("h3",{attrs:{id:"初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[t._v("#")]),t._v(" 初始化")]),t._v(" "),n("ul",[n("li",[t._v("第一种方式: 可以在 main.js中，初始化 EventBus")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Vue.prototype.$EventBus = new Vue()\n")])])]),n("ul",[n("li",[t._v("第二种方式: 创建一个 Bus.js,再创建事件总线并将其导出，以便其它模块可以使用或者监听它")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// Bus.js\nimport Vue from 'vue'\nexport const EventBus = new Vue();\n")])])]),n("blockquote",[n("p",[t._v("你需要做的只是引入 Vue 并导出它的一个实例（在这种情况下，我称它为 EventBus ）。实质上它是一个不具备 DOM 的组件，它具有的仅仅只是它实例方法而已，因此它非常的轻便。")])]),t._v(" "),n("p",[t._v("现在我们已经创建了 EventBus ，接下来你需要做到的就是在你的组件中加载它，并且调用同一个方法，就如你在父子组件中互相传递消息一样。")]),t._v(" "),n("h3",{attrs:{id:"发送和接受事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#发送和接受事件"}},[t._v("#")]),t._v(" 发送和接受事件")]),t._v(" "),n("p",[t._v("其实和 父子组件的通信差不多,用 "),n("code",[t._v("EventBus.$emit('emit事件名'，数据)")]),t._v("发送， "),n("code",[t._v('EventBus.$on("emit事件名", callback(payload1,…))')]),t._v(" 接受")]),t._v(" "),n("p",[t._v("现在假设 A 组件与 B 组件通信")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('\x3c!-- A.vue --\x3e\n<template>\n    <p>{{msgB}}</p>\n    <button @click="sendMsgA()">-</button>\n</template>\n\n<script> \nimport { EventBus } from "../Bus.js";\nexport default {\n    data(){\n        return {\n        msg: \'\'\n        }\n    },\n    mounted() {\n        EventBus.$on("bMsg", (msg) => {\n            // a组件接受 b发送来的消息\n            this.msg = msg;\n        });\n    },\n    methods: {\n        sendMsgA() {\n            EventBus.$emit("aMsg", \'来自A页面的消息\'); // a 发送数据\n        }\n    }\n}; \n<\/script>\n\n\n\x3c!-- B.vue --\x3e\n<template>\n  <p>{{msgA}}</p>\n    <button @click="sendMsgB()">-</button>\n</template>\n\n<script> \nimport { EventBus } from "../event-bus.js";\nexport default {\n    data(){\n        return {\n        msg: \'\'\n        }\n    },\n    mounted() {\n        EventBus.$on("aMsg", (msg) => {\n            // b组件接受 a发送来的消息\n            this.msg = msg;\n        });\n    },\n    methods: {\n        sendMsgB() {\n            EventBus.$emit("bMsg", \'来自b页面的消息\'); // b发送数据\n        }\n    }\n};\n<\/script>\n')])])]),n("p",[t._v("如果只监听(接受)一次数据可以使用 "),n("code",[t._v("EventBus.$once('事件名', callback(payload1,…)")])]),t._v(" "),n("h3",{attrs:{id:"移除移除事件监听者"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#移除移除事件监听者"}},[t._v("#")]),t._v(" 移除移除事件监听者")]),t._v(" "),n("p",[t._v("EventBus.$off('事件名', 回调函数)")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("EventBus.$off('事件名', callback)")]),t._v("，只移除这个回调的监听器。")]),t._v(" "),n("li",[n("code",[t._v("EventBus.$off('事件名')")]),t._v("，移除该事件所有的监听器。")]),t._v(" "),n("li",[n("code",[t._v("EventBus.$off()")]),t._v("， 移除所有的事件监听器，注意不需要添加任何参数。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 导入我们刚刚创建的 EventBus\nimport { EventBus } from '../Bus.js'\n\n// 事件监听函数\nconst clickHandler = function(clickCount) {\n  console.log(`Oh, hello)`)\n}\n\n// 开始监听事件\nEventBus.$on('i-got-clicked', clickHandler);\n\n// 停止监听\nEventBus.$off('i-got-clicked', clickHandler);\n")])])]),n("h3",{attrs:{id:"全局eventbus"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#全局eventbus"}},[t._v("#")]),t._v(" 全局EventBus")]),t._v(" "),n("p",[t._v("全局EventBus，虽然在某些示例中不提倡使用，但它是一种非常漂亮且简单的方法，可以跨组件之间共享数据。")]),t._v(" "),n("p",[t._v("它的工作原理是发布/订阅方法，通常称为 Pub/Sub 。")]),t._v(" "),n("p",[t._v("由于是全局的，必然所有事件都订阅它, 所有组件也发布到它，订阅组件获得更新。也就是说所有组件都能够将事件发布到总线，然后总线由另一个组件订阅，然后订阅它的组件将得到更新。")]),t._v(" "),n("h4",{attrs:{id:"创建全局eventbus"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建全局eventbus"}},[t._v("#")]),t._v(" 创建全局EventBus")]),t._v(" "),n("p",[t._v("全局事件总线只不过是一个简单的 vue 组件。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var EventBus = new Vue();\n\nObject.defineProperties(Vue.prototype, {\n  $bus: {\n    get: function () {\n      return EventBus\n    }\n  }\n})\n// 这个初始化的第一种方法，个人感觉区别不大\n")])])]),n("h4",{attrs:{id:"使用-on和-emit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-on和-emit"}},[t._v("#")]),t._v(" 使用 $on和$emit")]),t._v(" "),n("p",[t._v("在这个特定的总线中使用两个方法。一个用于创建发出的事件，它就是$emit；另一个用于订阅$on：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("this.$bus.$emit('nameOfEvent',{ ... pass some event data ...});\n\nthis.$bus.$on('nameOfEvent',($event) => {\n    // ...\n})\n")])])]),n("h3",{attrs:{id:"eventbus的优缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#eventbus的优缺点"}},[t._v("#")]),t._v(" EventBus的优缺点")]),t._v(" "),n("h4",{attrs:{id:"缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),n("ul",[n("li",[t._v("大家都知道vue是单页应用，如果你在某一个页面刷新了之后，与之相关的EventBus会被移除，这样就导致业务走不下去。")]),t._v(" "),n("li",[t._v("如果业务有反复操作的页面，EventBus在监听的时候就会触发很多次，也是一个非常大的隐患。这时候我们就需要好好处理EventBus在项目中的关系。通常会用到，在vue页面销毁时，同时移除EventBus事件监听。")]),t._v(" "),n("li",[t._v("由于是都使用一个Vue实例，所以容易出现重复触发的情景，两个页面都定义了同一个事件名，并且没有用$off销毁（常出现在路由切换时）。")])]),t._v(" "),n("h4",{attrs:{id:"优点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),n("ul",[n("li",[t._v("解决了多层组件之间繁琐的事件传播。")]),t._v(" "),n("li",[t._v("使用原理十分简单，代码量少。")])]),t._v(" "),n("h2",{attrs:{id:"转载和引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#转载和引用"}},[t._v("#")]),t._v(" 转载和引用")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://link.segmentfault.com/?url=https%3A%2F%2Fjuejin.im%2Fpost%2F5bb355dae51d450ea4020b42",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue篇之事件总线(EventBus)"),n("OutboundLink")],1),t._v(" "),n("a",{attrs:{href:"https://link.segmentfault.com/?url=https%3A%2F%2Flearnku.com%2Fvuejs%2Ft%2F23292%2Fcreating-a-global-event-bus-using-vuejs",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用 Vue.js 创建全局事件总线"),n("OutboundLink")],1)]),t._v(" "),n("blockquote",[n("p",[n("a",{attrs:{href:"https://link.segmentfault.com/?url=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F72777951",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue事件总线（EventBus）使用详细介绍"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=a.exports}}]);