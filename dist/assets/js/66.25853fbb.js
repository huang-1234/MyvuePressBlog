(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{307:function(e,t,n){"use strict";function s(e,t,n,s,r,o,a,p){var c,i="function"==typeof e?e.options:e;if(t&&(i.render=t,i.staticRenderFns=n,i._compiled=!0),s&&(i.functional=!0),o&&(i._scopeId="data-v-"+o),a?(c=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),r&&r.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a)},i._ssrRegister=c):r&&(c=p?function(){r.call(this,(i.functional?this.parent:this).$root.$options.shadowRoot)}:r),c)if(i.functional){i._injectStyles=c;var _=i.render;i.render=function(e,t){return c.call(t),_(e,t)}}else{var v=i.beforeCreate;i.beforeCreate=v?[].concat(v,c):[c]}return{exports:e,options:i}}n.d(t,"a",(function(){return s}))},423:function(e,t,n){"use strict";n.r(t);var s=n(307),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_9-js的原型和原型链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-js的原型和原型链"}},[e._v("#")]),e._v(" 9. js的原型和原型链")]),e._v(" "),n("p",[e._v("##构造函数创建对象：")]),e._v(" "),n("div",{staticClass:"language-jsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Person() {\n\n}\nvar person = new Person();\nperson.name = 'Kevin';\nconsole.log(person.name) // Kevin\n")])])]),n("p",[e._v("Person 就是一个构造函数，我们使用 new 创建了一个实例对象 person")]),e._v(" "),n("h2",{attrs:{id:"prototype"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[e._v("#")]),e._v(" prototype")]),e._v(" "),n("p",[e._v('每个函数都有一个 prototype 属性\n每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型"继承"属性。')]),e._v(" "),n("div",{staticClass:"language-jsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Person() {\n\n}\n// 虽然写在注释里，但是你要注意：\n// prototype是函数才会有的属性\nPerson.prototype.name = 'Kevin';\nvar person1 = new Person();\nvar person2 = new Person();\nconsole.log(person1.name) // Kevin\nconsole.log(person2.name) // Kevin\n")])])]),n("img",{attrs:{src:e.$withBase("/images/JS/es/ProtoType.webp"),alt:"ProtoType"}}),e._v(" "),n("p",[e._v("image.png")]),e._v(" "),n("h2",{attrs:{id:"proto"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#proto"}},[e._v("#")]),e._v(" "),n("strong",[e._v("proto")])]),e._v(" "),n("p",[e._v("每一个JavaScript对象(除了 null )都具有的一个属性，叫"),n("strong",[e._v("proto")]),e._v("，这个属性会指向该对象的原型")]),e._v(" "),n("div",{staticClass:"language-jsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Person() {\n\n}\nvar person = new Person();\nconsole.log(person.__proto__ === Person.prototype); // true\n")])])]),n("img",{attrs:{src:e.$withBase("/images/JS/es/__proto__.webp"),alt:"ProtoType"}}),e._v(" "),n("p",[e._v("image.png")]),e._v(" "),n("h2",{attrs:{id:"constructor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[e._v("#")]),e._v(" constructor")]),e._v(" "),n("p",[e._v("每个原型都有一个 constructor 属性指向关联的构造函数 实例原型指向构造函数")]),e._v(" "),n("div",{staticClass:"language-tsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Person() {\n\n}\nconsole.log(Person === Person.prototype.constructor); // true\n")])])]),n("img",{attrs:{src:e.$withBase("/images/JS/es/constructor.webp"),alt:"ProtoType"}}),e._v(" "),n("p",[e._v("image.png")]),e._v(" "),n("div",{staticClass:"language-jsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Person() {\n\n}\n\nvar person = new Person();\n\nconsole.log(person.__proto__ == Person.prototype) // true\nconsole.log(Person.prototype.constructor == Person) // true\n// 顺便学习一个ES5的方法,可以获得对象的原型\nconsole.log(Object.getPrototypeOf(person) === Person.prototype) // true\n")])])]),n("h6",{attrs:{id:"实例与原型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实例与原型"}},[e._v("#")]),e._v(" 实例与原型")]),e._v(" "),n("div",{staticClass:"language-jsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Person() {\n\n}\n\nPerson.prototype.name = 'Kevin';\n\nvar person = new Person();\n\nperson.name = 'Daisy';\nconsole.log(person.name) // Daisy\n\ndelete person.name;\nconsole.log(person.name) // Kevin\n")])])]),n("p",[e._v("在这个例子中，我们给实例对象 person 添加了 name 属性，当我们打印 person.name 的时候，结果自然为 Daisy。")]),e._v(" "),n("p",[e._v("但是当我们删除了 person 的 name 属性时，读取 person.name，从 person 对象中找不到 name 属性就会从 person 的原型也就是 person."),n("strong",[e._v("proto")]),e._v(" ，也就是 Person.prototype中查找，幸运的是我们找到了 name 属性，结果为 Kevin。")]),e._v(" "),n("h2",{attrs:{id:"原型与原型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原型与原型"}},[e._v("#")]),e._v(" 原型与原型")]),e._v(" "),n("div",{staticClass:"language-jsx extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var obj = new Object();\nobj.name = 'Kevin'\nconsole.log(obj.name) // Kevin\n")])])]),n("img",{attrs:{src:e.$withBase("/images/JS/es/Object.webp"),alt:"ProtoType"}}),e._v(" "),n("p",[e._v("image.png")]),e._v(" "),n("h2",{attrs:{id:"原型链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[e._v("#")]),e._v(" 原型链")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(Object.prototype.__proto__ === null) // true\n")])])]),n("img",{attrs:{src:e.$withBase("/images/JS/es/null.webp"),alt:"ProtoType"}}),e._v(" "),n("p",[e._v("image.png")]),e._v(" "),n("p",[e._v("JavaScript 默认并不会"),n("strong",[e._v("复制")]),e._v("对象的属性，相反，JavaScript 只是在两个对象之间创建一个"),n("strong",[e._v("关联")]),e._v("，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，"),n("strong",[e._v("委托")]),e._v("的说法反而更准确些")]),e._v(" "),n("p",[e._v("点击"),n("a",{attrs:{href:"https://blog.csdn.net/weixin_43352901/article/details/108089355",target:"_blank"}},[e._v("图解原型链")])]),e._v(" "),n("p",[e._v("write in 2018.09.25")])])}),[],!1,null,null,null);t.default=r.exports}}]);