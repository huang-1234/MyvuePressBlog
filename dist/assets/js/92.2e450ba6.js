(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{307:function(t,a,e){"use strict";function s(t,a,e,s,r,n,o,c){var i,p="function"==typeof t?t.options:t;if(a&&(p.render=a,p.staticRenderFns=e,p._compiled=!0),s&&(p.functional=!0),n&&(p._scopeId="data-v-"+n),o?(i=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),r&&r.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(o)},p._ssrRegister=i):r&&(i=c?function(){r.call(this,(p.functional?this.parent:this).$root.$options.shadowRoot)}:r),i)if(p.functional){p._injectStyles=i;var l=p.render;p.render=function(t,a){return i.call(a),l(t,a)}}else{var h=p.beforeCreate;p.beforeCreate=h?[].concat(h,i):[i]}return{exports:t,options:p}}e.d(a,"a",(function(){return s}))},451:function(t,a,e){"use strict";e.r(a);var s=e(307),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_4-关于router"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-关于router"}},[t._v("#")]),t._v(" 4.关于Router")]),t._v(" "),e("h2",{attrs:{id:"一、todolist案例相关知识点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、todolist案例相关知识点"}},[t._v("#")]),t._v(" 一、todoList案例相关知识点")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t\t1.拆分组件、实现静态组件，注意：className、style的写法\n\t\t2.动态初始化列表，如何确定将数据放在哪个组件的state中？\n\t\t\t\t\t——某个组件使用：放在其自身的state中\n\t\t\t\t\t——某些组件使用：放在他们共同的父组件state中（官方称此操作为：状态提升）\n\t\t3.关于父子之间通信：\n\t\t\t\t1.【父组件】给【子组件】传递数据：通过props传递\n\t\t\t\t2.【子组件】给【父组件】传递数据：通过props传递，要求父提前给子传递一个函数\n\t\t4.注意defaultChecked 和 checked的区别，类似的还有：defaultValue 和 value\n\t\t5.状态在哪里，操作状态的方法就在哪里\n")])])]),e("h3",{attrs:{id:"二、github搜索案例相关知识点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、github搜索案例相关知识点"}},[t._v("#")]),t._v(" 二、github搜索案例相关知识点")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t\t1.设计状态时要考虑全面，例如带有网络请求的组件，要考虑请求失败怎么办。\n\t\t2.ES6小知识点：解构赋值+重命名\n\t\t\t\t\tlet obj = {a:{b:1}}\n\t\t\t\t\tconst {a} = obj; //传统解构赋值\n\t\t\t\t\tconst {a:{b}} = obj; //连续解构赋值\n\t\t\t\t\tconst {a:{b:value}} = obj; //连续解构赋值+重命名\n\t\t3.消息订阅与发布机制\n\t\t\t\t\t1.先订阅，再发布（理解：有一种隔空对话的感觉）\n\t\t\t\t\t2.适用于任意组件间通信\n\t\t\t\t\t3.要在组件的componentWillUnmount中取消订阅\n\t\t4.fetch发送请求（关注分离的设计思想）\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst response= await fetch(`/api1/search/users2?q=${keyWord}`)\n\t\t\t\t\t\tconst data = await response.json()\n\t\t\t\t\t\tconsole.log(data);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.log('请求出错',error);\n\t\t\t\t\t}\n")])])]),e("h3",{attrs:{id:"三、路由的基本使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、路由的基本使用"}},[t._v("#")]),t._v(" 三、路由的基本使用")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t\t\t1.明确好界面中的导航区、展示区\n\t\t\t2.导航区的a标签改为Link标签\n\t\t\t\t\t\t<Link to=\"/xxxxx\">Demo</Link>\n\t\t\t3.展示区写Route标签进行路径的匹配\n\t\t\t\t\t\t<Route path='/xxxx' component={Demo}/>\n\t\t\t4.<App>的最外侧包裹了一个<BrowserRouter>或<HashRouter>\n")])])]),e("h3",{attrs:{id:"四、路由组件与一般组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、路由组件与一般组件"}},[t._v("#")]),t._v(" 四、路由组件与一般组件")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\t\t\t1.写法不同：\n\t\t\t\t\t\t一般组件：<Demo/>\n\t\t\t\t\t\t路由组件：<Route path="/demo" component={Demo}/>\n\t\t\t2.存放位置不同：\n\t\t\t\t\t\t一般组件：components\n\t\t\t\t\t\t路由组件：pages\n\t\t\t3.接收到的props不同：\n\t\t\t\t\t\t一般组件：写组件标签时传递了什么，就能收到什么\n\t\t\t\t\t\t路由组件：接收到三个固定的属性\n\t\t\t\t\t\t\t\t\t\t\thistory:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tgo: ƒ go(n)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tgoBack: ƒ goBack()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tgoForward: ƒ goForward()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpush: ƒ push(path, state)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treplace: ƒ replace(path, state)\n\t\t\t\t\t\t\t\t\t\t\tlocation:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpathname: "/about"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsearch: ""\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tstate: undefined\n\t\t\t\t\t\t\t\t\t\t\tmatch:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tparams: {}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpath: "/about"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\turl: "/about"\n')])])]),e("h2",{attrs:{id:"五、navlink与封装navlink"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、navlink与封装navlink"}},[t._v("#")]),t._v(" 五、NavLink与封装NavLink")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t\t\t\t1.NavLink可以实现路由链接的高亮，通过activeClassName指定样式名\n")])])]),e("h2",{attrs:{id:"六、switch的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六、switch的使用"}},[t._v("#")]),t._v(" 六、Switch的使用")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t\t\t\t1.通常情况下，path和component是一一对应的关系。\n\t\t\t\t2.Switch可以提高路由匹配效率(单一匹配)。\n")])])]),e("h2",{attrs:{id:"七、解决多级路径刷新页面样式丢失的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七、解决多级路径刷新页面样式丢失的问题"}},[t._v("#")]),t._v(" 七、解决多级路径刷新页面样式丢失的问题")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t\t\t\t1.public/index.html 中 引入样式时不写 ./ 写 / （常用）\n\t\t\t\t2.public/index.html 中 引入样式时不写 ./ 写 %PUBLIC_URL% （常用）\n\t\t\t\t3.使用HashRouter\n")])])]),e("h2",{attrs:{id:"八、路由的严格匹配与模糊匹配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#八、路由的严格匹配与模糊匹配"}},[t._v("#")]),t._v(" 八、路由的严格匹配与模糊匹配")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\t\t\t\t1.默认使用的是模糊匹配（简单记：【输入的路径】必须包含要【匹配的路径】，且顺序要一致）\n\t\t\t\t2.开启严格匹配：<Route exact={true} path="/about" component={About}/>\n\t\t\t\t3.严格匹配不要随便开启，需要再开，有些时候开启会导致无法继续匹配二级路由\n')])])]),e("h2",{attrs:{id:"九、redirect的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#九、redirect的使用"}},[t._v("#")]),t._v(" 九、Redirect的使用")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('\t\t\t\t1.一般写在所有路由注册的最下方，当所有路由都无法匹配时，跳转到Redirect指定的路由\n\t\t\t\t2.具体编码：\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path="/about" component={About}/>\n\t\t\t\t\t\t\t<Route path="/home" component={Home}/>\n\t\t\t\t\t\t\t<Redirect to="/about"/>\n\t\t\t\t\t\t</Switch>\n')])])]),e("h2",{attrs:{id:"十、嵌套路由"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十、嵌套路由"}},[t._v("#")]),t._v(" 十、嵌套路由")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t\t\t\t1.注册子路由时要写上父路由的path值\n\t\t\t\t2.路由的匹配是按照注册路由的顺序进行的\n")])])]),e("h2",{attrs:{id:"十一、向路由组件传递参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十一、向路由组件传递参数"}},[t._v("#")]),t._v(" 十一、向路由组件传递参数")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t\t\t\t1.params参数\n\t\t\t\t\t\t\t路由链接(携带参数)：<Link to='/demo/test/tom/18'}>详情</Link>\n\t\t\t\t\t\t\t注册路由(声明接收)：<Route path=\"/demo/test/:name/:age\" component={Test}/>\n\t\t\t\t\t\t\t接收参数：this.props.match.params\n\t\t\t\t2.search参数\n\t\t\t\t\t\t\t路由链接(携带参数)：<Link to='/demo/test?name=tom&age=18'}>详情</Link>\n\t\t\t\t\t\t\t注册路由(无需声明，正常注册即可)：<Route path=\"/demo/test\" component={Test}/>\n\t\t\t\t\t\t\t接收参数：this.props.location.search\n\t\t\t\t\t\t\t备注：获取到的search是urlencoded编码字符串，需要借助querystring解析\n\t\t\t\t3.state参数\n\t\t\t\t\t\t\t路由链接(携带参数)：<Link to={{pathname:'/demo/test',state:{name:'tom',age:18}}}>详情</Link>\n\t\t\t\t\t\t\t注册路由(无需声明，正常注册即可)：<Route path=\"/demo/test\" component={Test}/>\n\t\t\t\t\t\t\t接收参数：this.props.location.state\n\t\t\t\t\t\t\t备注：刷新也可以保留住参数\n")])])]),e("h2",{attrs:{id:"十二、编程式路由导航"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十二、编程式路由导航"}},[t._v("#")]),t._v(" 十二、编程式路由导航")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t\t\t\t\t借助this.prosp.history对象上的API对操作路由跳转、前进、后退\n\t\t\t\t\t\t\t-this.prosp.history.push()\n\t\t\t\t\t\t\t-this.prosp.history.replace()\n\t\t\t\t\t\t\t-this.prosp.history.goBack()\n\t\t\t\t\t\t\t-this.prosp.history.goForward()\n\t\t\t\t\t\t\t-this.prosp.history.go()\n")])])]),e("h2",{attrs:{id:"十三、browserrouter与hashrouter的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十三、browserrouter与hashrouter的区别"}},[t._v("#")]),t._v(" 十三、BrowserRouter与HashRouter的区别")]),t._v(" "),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t\t\t1.底层原理不一样：\n\t\t\t\t\t\tBrowserRouter使用的是H5的history API，不兼容IE9及以下版本。\n\t\t\t\t\t\tHashRouter使用的是URL的哈希值。\n\t\t\t2.path表现形式不一样\n\t\t\t\t\t\tBrowserRouter的路径中没有#,例如：localhost:3000/demo/test\n\t\t\t\t\t\tHashRouter的路径包含#,例如：localhost:3000/#/demo/test\n\t\t\t3.刷新后对路由state参数的影响\n\t\t\t\t\t\t(1).BrowserRouter没有任何影响，因为state保存在history对象中。\n\t\t\t\t\t\t(2).HashRouter刷新后会导致路由state参数的丢失！！！\n\t\t\t4.备注：HashRouter可以用于解决一些路径错误相关的问题。\n")])])]),e("h2",{attrs:{id:"十四、antd的按需引入-自定主题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十四、antd的按需引入-自定主题"}},[t._v("#")]),t._v(" 十四、antd的按需引入+自定主题")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("\t\t1.安装依赖：yarn add react-app-rewired customize-cra babel-plugin-import less less-loader\n\t\t2.修改package.json\n")])])]),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"scripts"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"start"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"react-app-rewired start"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"build"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"react-app-rewired build"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"react-app-rewired test"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eject"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"react-scripts eject"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n")])])]),e("div",{staticClass:"language-text extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t\t\t3.根目录下创建config-overrides.js\n\t\t\t\t\t//配置具体的修改规则\n\t\t\t\t\tconst { override, fixBabelImports,addLessLoader} = require('customize-cra');\n\t\t\t\t\tmodule.exports = override(\n\t\t\t\t\t\tfixBabelImports('import', {\n\t\t\t\t\t\t\tlibraryName: 'antd',\n\t\t\t\t\t\t\tlibraryDirectory: 'es',\n\t\t\t\t\t\t\tstyle: true,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\taddLessLoader({\n\t\t\t\t\t\t\tlessOptions:{\n\t\t\t\t\t\t\t\tjavascriptEnabled: true,\n\t\t\t\t\t\t\t\tmodifyVars: { '@primary-color': 'green' },\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t4.备注：不用在组件里亲自引入样式了，即：import 'antd/dist/antd.css'应该删掉\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);