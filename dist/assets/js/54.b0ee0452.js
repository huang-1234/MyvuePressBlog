(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{415:function(t,e,l){"use strict";l.r(e);var a=l(45),v=Object(a.a)({},(function(){var t=this,e=t.$createElement,l=t._self._c||e;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("h1",{attrs:{id:"c-数据类型"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#c-数据类型"}},[t._v("#")]),t._v(" C++ 数据类型")]),t._v(" "),l("p",[t._v("使用编程语言进行编程时，需要用到各种变量来存储各种信息。变量保留的是它所存储的值的内存位置。这意味着，当您创建一个变量时，就会在内存中保留一些空间。")]),t._v(" "),l("p",[t._v("您可能需要存储各种数据类型（比如字符型、宽字符型、整型、浮点型、双浮点型、布尔型等）的信息，操作系统会根据变量的数据类型，来分配内存和决定在保留内存中存储什么。")]),t._v(" "),l("h2",{attrs:{id:"基本的内置类型"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#基本的内置类型"}},[t._v("#")]),t._v(" 基本的内置类型")]),t._v(" "),l("p",[t._v("C++ 为程序员提供了种类丰富的内置数据类型和用户自定义的数据类型。下表列出了七种基本的 C++ 数据类型：")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("类型")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("关键字")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("布尔型")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("bool")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("字符型")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("char")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("整型")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("int")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("浮点型")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("float")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("双浮点型")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("double")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("无类型")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("void")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("宽字符型")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("wchar_t")])])])]),t._v(" "),l("p",[t._v("其实 wchar_t 是这样来的：")]),t._v(" "),l("div",{staticClass:"language-js extra-class"},[l("pre",{pre:!0,attrs:{class:"language-js"}},[l("code",[t._v("typedef short int wchar_t"),l("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),l("p",[t._v("所以 wchar_t 实际上的空间是和 short int 一样。")]),t._v(" "),l("p",[t._v("一些基本类型可以使用一个或多个类型修饰符进行修饰：")]),t._v(" "),l("ul",[l("li",[t._v("signed")]),t._v(" "),l("li",[t._v("unsigned")]),t._v(" "),l("li",[t._v("short")]),t._v(" "),l("li",[t._v("long")])]),t._v(" "),l("p",[t._v("下表显示了各种变量类型在内存中存储值时需要占用的内存，以及该类型的变量所能存储的最大值和最小值。")]),t._v(" "),l("p",[t._v("**注意：**不同系统会有所差异，一字节为 8 位。")]),t._v(" "),l("p",[t._v("**注意：**long int 8 个字节，int 都是 4 个字节，早期的 C 编译器定义了 long int 占用 4 个字节，int 占用 2 个字节，新版的 C/C++ 标准兼容了早期的这一设定。")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("类型")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("位")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("范围")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("char")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("1 个字节")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("-128 到 127 或者 0 到 255")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("unsigned char")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("1 个字节")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("0 到 255")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("signed char")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("1 个字节")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("-128 到 127")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("int")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("4 个字节")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("-2147483648 到 2147483647")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("unsigned int")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("4 个字节")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("0 到 4294967295")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("signed int")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("4 个字节")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("-2147483648 到 2147483647")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("short int")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("2 个字节")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("-32768 到 32767")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("unsigned short int")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("2 个字节")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("0 到 65,535")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("signed short int")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("2 个字节")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("-32768 到 32767")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("long int")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("8 个字节")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("signed long int")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("8 个字节")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("unsigned long int")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("8 个字节")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("0 到 18,446,744,073,709,551,615")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("float")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("4 个字节")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("精度型占4个字节（32位）内存空间，+/- 3.4e +/- 38 (~7 个数字)")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("double")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("8 个字节")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("双精度型占8 个字节（64位）内存空间，+/- 1.7e +/- 308 (~15 个数字)")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("long double")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("16 个字节")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("长双精度型 16 个字节（128位）内存空间，可提供18-19位有效数字。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("wchar_t")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("2 或 4 个字节")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("1 个宽字符")])])])]),t._v(" "),l("p",[t._v("从上表可得知，变量的大小会根据编译器和所使用的电脑而有所不同。")]),t._v(" "),l("p",[t._v("下面实例会输出您电脑上各种数据类型的大小。")]),t._v(" "),l("h2",{attrs:{id:"实例"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[t._v("#")]),t._v(" 实例")]),t._v(" "),l("p",[t._v("本实例使用了 "),l("strong",[t._v("endl")]),t._v("，这将在每一行后插入一个换行符，"),l("strong",[t._v("<<")]),t._v(" 运算符用于向屏幕传多个值，"),l("strong",[t._v("sizeof()")]),t._v(" 函数用来获取各种数据类型的大小。")]),t._v(" "),l("p",[t._v("当上面的代码被编译和执行时，它会产生以下的结果，结果会根据所使用的计算机而有所不同：")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("type:         ************size**************\nbool:         所占字节数：1    最大值：1        最小值：0\nchar:         所占字节数：1    最大值：        最小值：?\nsigned char:     所占字节数：1    最大值：        最小值：?\nunsigned char:     所占字节数：1    最大值：?        最小值：\nwchar_t:     所占字节数：4    最大值：2147483647        最小值：-2147483648\nshort:         所占字节数：2    最大值：32767        最小值：-32768\nint:         所占字节数：4    最大值：2147483647    最小值：-2147483648\nunsigned:     所占字节数：4    最大值：4294967295    最小值：0\nlong:         所占字节数：8    最大值：9223372036854775807    最小值：-9223372036854775808\nunsigned long:     所占字节数：8    最大值：18446744073709551615    最小值：0\ndouble:     所占字节数：8    最大值：1.79769e+308    最小值：2.22507e-308\nlong double:     所占字节数：16    最大值：1.18973e+4932    最小值：3.3621e-4932\nfloat:         所占字节数：4    最大值：3.40282e+38    最小值：1.17549e-38\nsize_t:     所占字节数：8    最大值：18446744073709551615    最小值：0\nstring:     所占字节数：24\ntype:         ************size**************\n")])])]),l("h2",{attrs:{id:"typedef-声明"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#typedef-声明"}},[t._v("#")]),t._v(" typedef 声明")]),t._v(" "),l("p",[t._v("您可以使用 "),l("strong",[t._v("typedef")]),t._v(" 为一个已有的类型取一个新的名字。下面是使用 typedef 定义一个新类型的语法：")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("typedef type newname; \n")])])]),l("p",[t._v("例如，下面的语句会告诉编译器，feet 是 int 的另一个名称：")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("typedef int feet;\n")])])]),l("p",[t._v("现在，下面的声明是完全合法的，它创建了一个整型变量 distance：")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("feet distance;\n")])])]),l("h2",{attrs:{id:"枚举类型"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#枚举类型"}},[t._v("#")]),t._v(" 枚举类型")]),t._v(" "),l("p",[t._v("枚举类型(enumeration)是C++中的一种派生数据类型，它是由用户定义的若干枚举常量的集合。")]),t._v(" "),l("p",[t._v('如果一个变量只有几种可能的值，可以定义为枚举(enumeration)类型。所谓"枚举"是指将变量的值一一列举出来，变量的值只能在列举出来的值的范围内。')]),t._v(" "),l("p",[t._v("创建枚举，需要使用关键字 "),l("strong",[t._v("enum")]),t._v("。枚举类型的一般形式为：")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("enum 枚举名{ \n     标识符[=整型常数], \n     标识符[=整型常数], \n... \n    标识符[=整型常数]\n} 枚举变量;\n    \n")])])]),l("p",[t._v('如果枚举没有初始化, 即省掉"=整型常数"时, 则从第一个标识符开始。')]),t._v(" "),l("p",[t._v('例如，下面的代码定义了一个颜色枚举，变量 c 的类型为 color。最后，c 被赋值为 "blue"。')]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("enum color { red, green, blue } c;\nc = blue;\n")])])]),l("p",[t._v("默认情况下，第一个名称的值为 0，第二个名称的值为 1，第三个名称的值为 2，以此类推。但是，您也可以给名称赋予一个特殊的值，只需要添加一个初始值即可。例如，在下面的枚举中，"),l("strong",[t._v("green")]),t._v(" 的值为 5。")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("enum color { red, green=5, blue };\n")])])]),l("p",[t._v("在这里，"),l("strong",[t._v("blue")]),t._v(" 的值为 6，因为默认情况下，每个名称都会比它前面一个名称大 1，但 red 的值依然为 0。")]),t._v(" "),l("h2",{attrs:{id:"c-中的类型限定符"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#c-中的类型限定符"}},[t._v("#")]),t._v(" C++ 中的类型限定符")]),t._v(" "),l("p",[t._v("类型限定符提供了变量的额外信息。")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("限定符")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("含义")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("const")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[l("strong",[t._v("const")]),t._v(" 类型的对象在程序执行期间不能被修改改变。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("volatile")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("修饰符 "),l("strong",[t._v("volatile")]),t._v(" 告诉编译器不需要优化volatile声明的变量，让程序可以直接从内存中读取变量。对于一般的变量编译器会对变量进行优化，将内存中的变量值放在寄存器中以加快读写效率。")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("restrict")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("由 "),l("strong",[t._v("restrict")]),t._v(" 修饰的指针是唯一一种访问它所指向的对象的方式。只有 C99 增加了新的类型限定符 restrict。")])])])]),t._v(" "),l("h2",{attrs:{id:"c-中的运算符优先级"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#c-中的运算符优先级"}},[t._v("#")]),t._v(" C++ 中的运算符优先级")]),t._v(" "),l("p",[t._v("运算符的优先级确定表达式中项的组合。这会影响到一个表达式如何计算。某些运算符比其他运算符有更高的优先级，例如，乘除运算符具有比加减运算符更高的优先级。")]),t._v(" "),l("p",[t._v("例如 x = 7 + 3 * 2，在这里，x 被赋值为 13，而不是 20，因为运算符 * 具有比 + 更高的优先级，所以首先计算乘法 3*2，然后再加上 7。")]),t._v(" "),l("p",[t._v("下表将按运算符优先级从高到低列出各个运算符，具有较高优先级的运算符出现在表格的上面，具有较低优先级的运算符出现在表格的下面。在表达式中，较高优先级的运算符会优先被计算。")]),t._v(" "),l("table",[l("thead",[l("tr",[l("th",{staticStyle:{"text-align":"left"}},[t._v("类别")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("运算符")]),t._v(" "),l("th",{staticStyle:{"text-align":"left"}},[t._v("结合性")])])]),t._v(" "),l("tbody",[l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("后缀")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("() [] -> . ++ - -")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("一元")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("+ - ! ~ ++ - - (type)* & sizeof")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("从右到左")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("乘除")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("* / %")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("加减")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("+ -")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("移位")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("<< >>")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("关系")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("< <= > >=")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("相等")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("== !=")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("位与 AND")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("&")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("位异或 XOR")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("^")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("位或 OR")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("|")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("逻辑与 AND")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("&&")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("逻辑或 OR")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("||")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("条件")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("?:")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("从右到左")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("赋值")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("= += -= *= /= %=>>= <<= &= ^= |=")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("从右到左")])]),t._v(" "),l("tr",[l("td",{staticStyle:{"text-align":"left"}},[t._v("逗号")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v(",")]),t._v(" "),l("td",{staticStyle:{"text-align":"left"}},[t._v("从左到右")])])])]),t._v(" "),l("h3",{attrs:{id:"实例-2"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#实例-2"}},[t._v("#")]),t._v(" 实例")]),t._v(" "),l("p",[t._v("请看下面的实例，了解 C++ 中运算符的优先级。")]),t._v(" "),l("p",[t._v("复制并黏贴下面的 C++ 程序到 test.cpp 文件中，编译并运行程序。")]),t._v(" "),l("p",[t._v("对比有括号和没有括号时的区别，这将产生不同的结果。因为 ()、 /、 * 和 + 有不同的优先级，高优先级的操作符将优先计算。")]),t._v(" "),l("div",{staticClass:"language-c++ extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v('#include <iostream>\nusing namespace std;\n \nint main(){\n   int a = 20;\n   int b = 10;\n   int c = 15;\n   int d = 5;\n   int e;\n \n   e = (a + b) * c / d;      // ( 30 * 15 ) / 5\n   cout << "(a + b) * c / d 的值是 " << e << endl ;\n \n   e = ((a + b) * c) / d;    // (30 * 15 ) / 5\n   cout << "((a + b) * c) / d 的值是 " << e << endl ;\n \n   e = (a + b) * (c / d);   // (30) * (15/5)\n   cout << "(a + b) * (c / d) 的值是 " << e << endl ;\n \n   e = a + (b * c) / d;     //  20 + (150/5)\n   cout << "a + (b * c) / d 的值是 " << e << endl ;\n  \n   return 0;\n}\n')])])]),l("p",[t._v("当上面的代码被编译和执行时，它会产生以下结果：")]),t._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",{pre:!0,attrs:{class:"language-text"}},[l("code",[t._v("(a + b) * c / d 的值是 90\n((a + b) * c) / d 的值是 90\n(a + b) * (c / d) 的值是 90\na + (b * c) / d 的值是 50\n")])])])])}),[],!1,null,null,null);e.default=v.exports}}]);