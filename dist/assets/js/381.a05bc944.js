(window.webpackJsonp=window.webpackJsonp||[]).push([[381],{889:function(e,t,a){"use strict";a.r(t);var n=a(6),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"interface-vs-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interface-vs-type"}},[e._v("#")]),e._v(" interface VS type")]),e._v(" "),a("p",[e._v("大家使用 typescript 总会使用到 interface 和 type，"),a("a",{attrs:{href:"https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方规范"),a("OutboundLink")],1),e._v(" 稍微说了下两者的区别")]),e._v(" "),a("blockquote",[a("ul",[a("li",[e._v("An interface can be named in an extends or implements clause, but a type alias for an object type literal cannot.")]),e._v(" "),a("li",[e._v("An interface can have multiple merged declarations, but a type alias for an object type literal cannot.\n但是没有太具体的例子。")])])]),e._v(" "),a("p",[e._v("明人不说暗话，直接上区别。")]),e._v(" "),a("h2",{attrs:{id:"相同点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相同点"}},[e._v("#")]),e._v(" 相同点")]),e._v(" "),a("h3",{attrs:{id:"都可以描述一个对象或者函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#都可以描述一个对象或者函数"}},[e._v("#")]),e._v(" 都可以描述一个对象或者函数")]),e._v(" "),a("h4",{attrs:{id:"interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interface"}},[e._v("#")]),e._v(" interface")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("interface User {\n  name: string\n  age: number\n}\n\ninterface SetUser {\n  (name: string, age: number): void;\n}\n")])])]),a("h4",{attrs:{id:"type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[e._v("#")]),e._v(" type")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type User = {\n  name: string\n  age: number\n};\n\ntype SetUser = (name: string, age: number): void;\n")])])]),a("h3",{attrs:{id:"拓展-extends-与-交叉类型-intersection-types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拓展-extends-与-交叉类型-intersection-types"}},[e._v("#")]),e._v(" 拓展（extends）与 交叉类型（Intersection Types）")]),e._v(" "),a("p",[e._v("interface 可以 extends， 但 type 是不允许 extends 和 implement 的，"),a("strong",[e._v("但是 type 缺可以通过交叉类型 实现 interface 的 extend 行为")]),e._v("，并且两者并不是相互独立的，也就是说 interface 可以 extends type, type 也可以 与 interface 类型 交叉 。")]),e._v(" "),a("p",[a("strong",[e._v("虽然效果差不多，但是两者语法不同")]),e._v("。")]),e._v(" "),a("h4",{attrs:{id:"interface-extends-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interface-extends-interface"}},[e._v("#")]),e._v(" interface extends interface")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("interface Name { \n  name: string; \n}\ninterface User extends Name { \n  age: number; \n}\n")])])]),a("h4",{attrs:{id:"type-与-type-交叉"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type-与-type-交叉"}},[e._v("#")]),e._v(" type 与 type 交叉")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Name = { \n  name: string; \n}\ntype User = Name & { age: number  };\n")])])]),a("h4",{attrs:{id:"interface-extends-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interface-extends-type"}},[e._v("#")]),e._v(" interface extends type")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Name = { \n  name: string; \n}\ninterface User extends Name { \n  age: number; \n}\n")])])]),a("h4",{attrs:{id:"type-与-interface-交叉"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type-与-interface-交叉"}},[e._v("#")]),e._v(" type 与 interface 交叉")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("interface Name { \n  name: string; \n}\ntype User = Name & { \n  age: number; \n}\n")])])]),a("h2",{attrs:{id:"不同点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不同点"}},[e._v("#")]),e._v(" 不同点")]),e._v(" "),a("h3",{attrs:{id:"type-可以而-interface-不行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type-可以而-interface-不行"}},[e._v("#")]),e._v(" type 可以而 interface 不行")]),e._v(" "),a("ul",[a("li",[e._v("type 可以声明基本类型别名，联合类型，元组等类型")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 基本类型别名\ntype Name = string\n\n// 联合类型\ninterface Dog {\n    wong();\n}\ninterface Cat {\n    miao();\n}\n\ntype Pet = Dog | Cat\n\n// 具体定义数组每个位置的类型\ntype PetList = [Dog, Pet]\n")])])]),a("ul",[a("li",[e._v("type 语句中还可以使用 typeof 获取实例的 类型进行赋值")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// 当你想获取一个变量的类型时，使用 typeof\nlet div = document.createElement('div');\ntype B = typeof div\n")])])]),a("ul",[a("li",[e._v("其他骚操作")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type StringOrNumber = string | number;  \ntype Text = string | { text: string };  \ntype NameLookup = Dictionary<string, Person>;  \ntype Callback<T> = (data: T) => void;  \ntype Pair<T> = [T, T];  \ntype Coordinates = Pair<number>;  \ntype Tree<T> = T | { left: Tree<T>, right: Tree<T> };\n")])])]),a("h3",{attrs:{id:"interface-可以而-type-不行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interface-可以而-type-不行"}},[e._v("#")]),e._v(" interface 可以而 type 不行")]),e._v(" "),a("p",[e._v("interface 能够声明合并")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("interface User {\n  name: string\n  age: number\n}\n\ninterface User {\n  sex: string\n}\n\n/*\nUser 接口为 {\n  name: string\n  age: number\n  sex: string \n}\n*/\n")])])]),a("h1",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),a("p",[e._v("一般来说，如果不清楚什么时候用interface/type，能用 interface 实现，就用 interface , 如果不能就用 type 。其他更多详情参看 "),a("a",{attrs:{href:"https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方规范文档"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);