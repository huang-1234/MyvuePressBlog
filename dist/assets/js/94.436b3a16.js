(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{604:function(t,a,s){"use strict";s.r(a);var n=s(6),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"基本语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[t._v("#")]),t._v(" 基本语法")]),t._v(" "),s("p",[t._v("Go语言是静态类型语言，因此变量（variable）是有明确类型的，编译器也会检查变量类型的正确性。在数学概念中，变量表示没有固定值且可改变的数。但从计算机系统实现角度来看，变量是一段或多段用来存储数据的内存。")]),t._v(" "),s("p",[t._v("声明变量的一般形式是使用 var 关键字：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v("\n")])])]),s("p",[t._v("其中，var 是声明变量的关键字，name 是变量名，type 是变量的类型。")]),t._v(" "),s("p",[t._v("需要注意的是，Go语言和许多编程语言不同，它在声明变量时将变量的类型放在变量的名称之后。这样做的好处就是可以避免像C语言中那样含糊不清的声明形式，例如："),s("code",[t._v("int* a, b;")]),t._v(" 。其中只有 a 是指针而 b 不是。如果你想要这两个变量都是指针，则需要将它们分开书写。而在 Go 中，则可以和轻松地将它们都声明为指针类型：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n")])])]),s("p",[t._v("Go语言的基本类型有：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("、"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int8")]),t._v("、"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int16")]),t._v("、"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v("、"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int64")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint")]),t._v("、"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint8")]),t._v("、"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint16")]),t._v("、"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint32")]),t._v("、"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint64")]),t._v("、"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// uint8 的别名")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("rune")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// int32 的别名 代表一个 Unicode 码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float32")]),t._v("、"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float64")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("complex64")]),t._v("、"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("complex128")]),t._v("\n")])])]),s("p",[t._v("当一个变量被声明之后，系统自动赋予它该类型的零值：int 为 0，float 为 0.0，bool 为 false，string 为空字符串，指针为 nil 等。所有的内存在 Go 中都是经过初始化的。")]),t._v(" "),s("p",[t._v("变量的命名规则遵循骆驼命名法，即首个单词小写，每个新单词的首字母大写，例如：numShips 和 startDate 。")]),t._v(" "),s("p",[t._v("Go语言的变量声明的标准格式为：")]),t._v(" "),s("p",[t._v("var 变量名 变量类型")]),t._v(" "),s("p",[t._v("变量声明以关键字 var 开头，后置变量类型，行尾无须分号。")]),t._v(" "),s("h2",{attrs:{id:"批量格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#批量格式"}},[t._v("#")]),t._v(" 批量格式")]),t._v(" "),s("p",[t._v("觉得每行都用 var 声明变量比较烦琐？没关系，还有一种为懒人提供的定义变量的方法：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("    \n  a "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("    \n  b "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("    \n  c "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float32")]),t._v("    \n  d "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("    \n  e "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("        \n    x "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("    \n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("使用关键字 var 和括号，可以将一组变量定义放在一起。")]),t._v(" "),s("h2",{attrs:{id:"简短格式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简短格式"}},[t._v("#")]),t._v(" 简短格式")]),t._v(" "),s("p",[t._v("除 var 关键字外，还可使用更加简短的变量定义和初始化语法。")]),t._v(" "),s("p",[t._v("名字 := 表达式")]),t._v(" "),s("p",[t._v("需要注意的是，简短模式（short variable declaration）有以下限制：")]),t._v(" "),s("ul",[s("li",[t._v("定义变量，同时显式初始化。")]),t._v(" "),s("li",[t._v("不能提供数据类型。")]),t._v(" "),s("li",[t._v("只能用在函数内部。")])]),t._v(" "),s("p",[t._v("和 var 形式声明语句一样，简短变量声明语句也可以用来声明和初始化一组变量：")]),t._v(" "),s("p",[t._v("i, j := 0, 1")]),t._v(" "),s("p",[t._v("下面通过一段代码来演示简短格式变量声明的基本样式。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('func main() {   x:=100   a,s:=1, "abc"}\n')])])]),s("p",[t._v("因为简洁和灵活的特点，简短变量声明被广泛用于大部分的局部变量的声明和初始化。var 形式的声明语句往往是用于需要显式指定变量类型地方，或者因为变量稍后会被重新赋值而初始值无关紧要的地方。")]),t._v(" "),s("p",[t._v("在声明变量时，自动对变量对应的内存区域进行初始化操作。每个变量会初始化其类型的默认值，例如：")]),t._v(" "),s("ul",[s("li",[t._v("整型和浮点型变量的默认值为 0 和 0.0。")]),t._v(" "),s("li",[t._v("字符串变量的默认值为空字符串。")]),t._v(" "),s("li",[t._v("布尔型变量默认为 bool。")]),t._v(" "),s("li",[t._v("切片、函数、指针变量的默认为 nil。")])]),t._v(" "),s("p",[t._v("当然，依然可以在变量声明时赋予变量一个初始值。")]),t._v(" "),s("h3",{attrs:{id:"回顾-c-语言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回顾-c-语言"}},[t._v("#")]),t._v(" 回顾 C 语言")]),t._v(" "),s("p",[t._v("在C语言中，变量在声明时，并不会对变量对应内存区域进行清理操作。此时，变量值可能是完全不可预期的结果。开发者需要习惯在使用C语言进行声明时要初始化操作，稍有不慎，就会造成不可预知的后果。")]),t._v(" "),s("p",[t._v("在网络上只有程序员才能看懂的“烫烫烫”和“屯屯屯”的梗，就来源于 C/C++中变量默认不初始化。")]),t._v(" "),s("p",[t._v("微软的 VC 编译器会将未初始化的栈空间以 16 进制的 0xCC 填充，而未初始化的堆空间使用 0xCD 填充，而 0xCCCC 和 0xCDCD 在中文的 GB2312 编码中刚好对应“烫”和“屯”字。")]),t._v(" "),s("p",[t._v("因此，如果一个字符串没有结束符"),s("code",[t._v("\\0")]),t._v("，直接输出的内存数据转换为字符串就刚好对应“烫烫烫”和“屯屯屯”。")])])}),[],!1,null,null,null);a.default=r.exports}}]);