(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{537:function(n,t,e){"use strict";e.r(t);var s=e(6),r=Object(s.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"js-数据结构解析和算法实现-并查集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js-数据结构解析和算法实现-并查集"}},[n._v("#")]),n._v(" JS 数据结构解析和算法实现-并查集")]),n._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" "),e("a",{attrs:{href:"https://blog.csdn.net/weixin_33962923/article/details/91394041",target:"_blank",rel:"noopener noreferrer"}},[n._v("前言"),e("OutboundLink")],1)]),n._v(" "),e("p",[n._v("【从蛋壳到满天飞】JS 数据结构解析和算法实现，全部文章大概的内容如下： Arrays(数组)、Stacks(栈)、Queues(队列)、LinkedList(链表)、Recursion(递归思想)、BinarySearchTree(二分搜索树)、Set(集合)、Map(映射)、Heap(堆)、PriorityQueue(优先队列)、SegmentTree(线段树)、Trie(字典树)、UnionFind(并查集)、AVLTree(AVL 平衡树)、RedBlackTree(红黑平衡树)、HashTable(哈希表)")]),n._v(" "),e("p",[n._v("源代码有三个：ES6（单个单个的 class 类型的 js 文件） | JS + HTML（一个 js 配合一个 html）| JAVA (一个一个的工程)")]),n._v(" "),e("p",[n._v("全部源代码已上传 github，"),e("a",{attrs:{href:"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Filovejwl%2FMaoDataStructures",target:"_blank",rel:"noopener noreferrer"}},[n._v("点击我吧"),e("OutboundLink")],1),n._v("，光看文章能够掌握两成，动手敲代码、动脑思考、画图才可以掌握八成。")]),n._v(" "),e("p",[n._v("本文章适合 对数据结构想了解并且感兴趣的人群，文章风格一如既往如此，就觉得手机上看起来比较方便，这样显得比较有条理，整理这些笔记加源码，时间跨度也算将近半年时间了，希望对想学习数据结构的人或者正在学习数据结构的人群有帮助。")]),n._v(" "),e("h2",{attrs:{id:"并查集-union-find"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并查集-union-find"}},[n._v("#")]),n._v(" 并查集 Union Find")]),n._v(" "),e("ol",[e("li",[n._v("并查集是一种很不一样的树形结构\n"),e("ol",[e("li",[n._v("之前的树结构都是由父亲指向孩子，")]),n._v(" "),e("li",[n._v("但是并查集是由孩子指向父亲而形成的这样的一种树结构，")]),n._v(" "),e("li",[n._v("这样一种奇怪的树结构可以非常高效的来解决某一类问题，")]),n._v(" "),e("li",[n._v("这类问题就是连接问题(Connectivity Problem)，")]),n._v(" "),e("li",[n._v("并查集是一种可以高效的回答连接问题的这样的一种数据结构。")])])]),n._v(" "),e("li",[n._v("连接问题\n"),e("ol",[e("li",[n._v("给出一个图中任意的两点，")]),n._v(" "),e("li",[n._v("这两点之间是否可以通过一个路径连接起来，")]),n._v(" "),e("li",[n._v("简单的使用肉眼观察距离很近的两点，是可以观察出来的，")]),n._v(" "),e("li",[n._v("如果两点的距离很远，两点之间隔着还有无数个点，")]),n._v(" "),e("li",[n._v("那么你就很难用肉眼观察出来它们是否是相连的，")]),n._v(" "),e("li",[n._v("此时就需要借助一定的数据结构，")]),n._v(" "),e("li",[n._v("而并查集就是回答这种连接问题一个非常好一种数据结构。")])])]),n._v(" "),e("li",[n._v("并查集可以非常快的判断网络中节点的连接状态\n"),e("ol",[e("li",[n._v("这里的网络实际上是一个抽象的概念，")]),n._v(" "),e("li",[n._v("不仅仅是在计算机领域所使用的互联网这样的一个网络，")]),n._v(" "),e("li",[n._v("最典型的一个例子，如社交网络、微博、微信、facebook，")]),n._v(" "),e("li",[n._v("他们之间其实就是由一个一个的人作为节点形成的一个网络，")]),n._v(" "),e("li",[n._v("在这种时候就可以把每两个用户之间是不是好友关系，")]),n._v(" "),e("li",[n._v("这样的一个概念给抽象成两个节点之间的边，")]),n._v(" "),e("li",[n._v("如果可以这样的建立一个网络的话，相应的就会产生连接问题，")]),n._v(" "),e("li",[n._v("比如两个用户 A 和 B，他们本来可能是互不认识的，")]),n._v(" "),e("li",[n._v("那么通过这个网络是否有可能通过认识的人他认识的人，")]),n._v(" "),e("li",[n._v("这样一点点的扩散，最终接触到那个你本来完全不认识的人，")]),n._v(" "),e("li",[n._v("这样的一个问题其实就是在社交网络中相应的连接问题。")])])]),n._v(" "),e("li",[n._v("网络这样的一种结构不仅仅是用在社交网络\n"),e("ol",[e("li",[n._v("很多信息网络，比如说亚马逊的商品、豆瓣儿的图书、")]),n._v(" "),e("li",[n._v("或者音乐网站的一些音乐专辑，这些内容都可以形成节点，")]),n._v(" "),e("li",[n._v("节点之间都可以以某种形式来定义边，从而形成一个巨大的网络，")]),n._v(" "),e("li",[n._v("可以在这样的网络中做非常多的事情，")]),n._v(" "),e("li",[n._v("比如交通系统、公交车、火车、飞机等航班与航线之间他们全都是网络，")]),n._v(" "),e("li",[n._v("更不用提计算机的网络，每一个路由器都是一个节点，")]),n._v(" "),e("li",[n._v("其实网络本身是一个应用非常广泛的概念，")]),n._v(" "),e("li",[n._v("在实际中处理的很多问题，把它抽象出来可能都是一个网络上的问题，")])])]),n._v(" "),e("li",[n._v("在回答网络中的节点的连接状态这样的一个问题的时候，\n"),e("ol",[e("li",[n._v("并查集就是一个非常强力的性能非常高效的数据结构，")]),n._v(" "),e("li",[n._v("并查集除了可以高效的回答网络中节点间的连接状态的问题之外，")]),n._v(" "),e("li",[n._v("还是数学中集合这种类的一个很好的实现，")]),n._v(" "),e("li",[n._v("如果你使用的集合主要的操作是在求两个集合的并集的时候，")]),n._v(" "),e("li",[n._v("并查集中"),e("code",[n._v("并")]),n._v("其实就是集合中的"),e("code",[n._v("并")]),n._v("这样的概念，")]),n._v(" "),e("li",[n._v("相应的查就是一个查询操作。")])])]),n._v(" "),e("li",[n._v("对于并查集来说他们非常高效的来回答在网络中两个节点是否连接的问题\n"),e("ol",[e("li",[n._v("在一个网络也是可以两个节点他们之间的路径是怎样的，")]),n._v(" "),e("li",[n._v("既然可以求出两个节点之间的路径，其实就回答了连接的问题，")]),n._v(" "),e("li",[n._v("两个节点之间如果存在一个路径，那么就一定是连接的，")]),n._v(" "),e("li",[n._v("如果这个路径根本就不存在，那么它肯定是不连接的，")]),n._v(" "),e("li",[n._v("这样的一个思路肯定是正确的，")]),n._v(" "),e("li",[n._v("如果想要回答两个节点之间的连接问题，")]),n._v(" "),e("li",[n._v("这个答案其实是比回答两个节点之间的路径问题回答的内容要少的，")]),n._v(" "),e("li",[n._v("因为只需要返回 true 或者 false 就好了，")]),n._v(" "),e("li",[n._v("但是如果要问 A 和 B 之间的路径是什么的话，")]),n._v(" "),e("li",[n._v("那么相应的就要得到一个从 A 节点出发一步一步达到节点 B，")]),n._v(" "),e("li",[n._v("这样一个具体的路径，换句话说其实回答路径问题的方式")]),n._v(" "),e("li",[n._v("来回答连接问题，那么真正回答的内容是更加的多了，")]),n._v(" "),e("li",[n._v("这样会导致结果消耗了一些额外的性能求出了当前不关心的内容，")]),n._v(" "),e("li",[n._v("那个内容就是 A 和 B 之间的具体路径是什么。")])])]),n._v(" "),e("li",[n._v("当你深入的学习数据结构和算法\n"),e("ol",[e("li",[n._v("慢慢的就会发现很多问题都会存在这样的情况，")]),n._v(" "),e("li",[n._v("你完全可以使用一个复杂度更高的算法来把这个问题求解出来，")]),n._v(" "),e("li",[n._v("但是这个算法之所以复杂度比较高，")]),n._v(" "),e("li",[n._v("就是因为其实它求出了你问的那个问题并不关心的内容，")]),n._v(" "),e("li",[n._v("例如自己实现的堆，完全可以使用顺序表示这样的结构，")]),n._v(" "),e("li",[n._v("或者直接使用一个线性结构数组或链表，")]),n._v(" "),e("li",[n._v("然后保持这个线性结构中所有元素都是有序的，")]),n._v(" "),e("li",[n._v("堆这种结构每次都要取出最大或最小的那个元素，")]),n._v(" "),e("li",[n._v("使用这种顺序表示是非常容易实现的，")]),n._v(" "),e("li",[n._v("但关键在于使用顺序表示不仅仅可以非常高效的取出")]),n._v(" "),e("li",[n._v("那个最大的元素或者最小的元素，还可以非常高效的取出")]),n._v(" "),e("li",[n._v("你存储的第二大的元素或者第二小的元素，")]),n._v(" "),e("li",[n._v("而这些内容都是在应用堆这种数据结构的时候其实不关心的，")]),n._v(" "),e("li",[n._v("在系统调度的时候只关系那个优先级最大的任务，")]),n._v(" "),e("li",[n._v("在医院医生决定做手术的时候只关心那个当前优先级最高的患者，")]),n._v(" "),e("li",[n._v("为他来准备手术，在涉及一个游戏 AI 的时候，")]),n._v(" "),e("li",[n._v("当前控制的那个小机器人只能选择一个对你威胁最大的敌人来攻击，")]),n._v(" "),e("li",[n._v("所以在这种情况下使用顺序表示，它其实维护了很多这些应用中并")]),n._v(" "),e("li",[n._v("不需要的信息，为了维护这些信息，它就需要有额外性能消耗，")]),n._v(" "),e("li",[n._v("要维持一个完全的顺序表示，在插入元素的时候时间复杂度是"),e("code",[n._v("O(n)")])]),n._v(" "),e("li",[n._v("这个级别的，之所以会产生这样的情况，")]),n._v(" "),e("li",[n._v("因为它不仅仅是维护了当前数据中最大的或者最小的那个元素，")]),n._v(" "),e("li",[n._v("而堆这种数据结构除了你关心的那个最大的元素和最小的元素之外，")]),n._v(" "),e("li",[n._v("不管其它元素之间的顺序，这才使得堆这种数据结构相比顺序表来说，")]),n._v(" "),e("li",[n._v("整体大大提高了它的性能。")])])]),n._v(" "),e("li",[n._v("连接问题和路径问题也是一样的\n"),e("ol",[e("li",[n._v("虽然可以使用求解路径的思路来看 A 和 B 这两个点是否连接，")]),n._v(" "),e("li",[n._v("但是由于它回答了额外的问题，A 和 B 之间具体怎么连接都回答出来了，")]),n._v(" "),e("li",[n._v("在很多时候并不关心 A 和 B 之间怎么连接，只要看他是否连接，")]),n._v(" "),e("li",[n._v("此时并查集就是一种更好的选择，对于这一点，")]),n._v(" "),e("li",[n._v("很多算法或者数据结构它们所解决的问题之间的差别是非常微妙的，")]),n._v(" "),e("li",[n._v("需要不断的积累不断的实践，慢慢的了解每种不同的算法或者不同的数据结构，")]),n._v(" "),e("li",[n._v("它们所解决的那个问题以及具体的不同点在哪里，")]),n._v(" "),e("li",[n._v("时间久了就可以慢慢的非常快速的反应出对于某一些具体问题")]),n._v(" "),e("li",[n._v("最好的应该使用哪种算法或者哪种数据结构来进行解决。")])])]),n._v(" "),e("li",[n._v("具体来讲对于并查集这种数据结构来说\n"),e("ol",[e("li",[n._v("存储一组数据，它主要可以支持两个动作，")]),n._v(" "),e("li",[e("code",[n._v("union(p, q)")]),n._v("，也就是并的操作，传入两个参数 p 和 q，")]),n._v(" "),e("li",[n._v("然后在并查集内部将这两个数据以及他们所在的集合给合并起来，")]),n._v(" "),e("li",[n._v("另外一个动作就是"),e("code",[n._v("isConnected(p, q)")]),n._v("，")]),n._v(" "),e("li",[n._v("也就是查询对于给定的两个数据，他们是否属于同一个集合，")]),n._v(" "),e("li",[n._v("并查集主要支持这样的两种操作。")])])]),n._v(" "),e("li",[n._v("需要设计这样的一种并查集接口\n"),e("ol",[e("li",[n._v("也就是说并查集也可以有不同的底层实现，")]),n._v(" "),e("li",[n._v("通过实现不同的并查集，")]),n._v(" "),e("li",[n._v("可以一点点的优化自己实现的并查集，")]),n._v(" "),e("li",[n._v("随着你不断的优化，")]),n._v(" "),e("li",[n._v("自己编写的这个并查集在具体的解决连接问题的时候，")]),n._v(" "),e("li",[n._v("效率会越来越高。")])])])]),n._v(" "),e("h2",{attrs:{id:"并查集-简单实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并查集-简单实现"}},[n._v("#")]),n._v(" 并查集 简单实现")]),n._v(" "),e("ol",[e("li",[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("MyUnionFind\n")])])]),e("ol",[e("li",[e("code",[n._v("unionElements(p, q)")]),n._v("：将这两个数据以及他们所在的集合进行合并。")]),n._v(" "),e("li",[e("code",[n._v("isConnected(p, q)")]),n._v("：查询两个数据是否在同一个集合中。")]),n._v(" "),e("li",[e("code",[n._v("getSize()")]),n._v("：当前并查集一共考虑多少个元素")])])]),n._v(" "),e("li",[e("p",[n._v("isConnected 方法中传入的 p 和 q 都是 int 型，")]),n._v(" "),e("ol",[e("li",[n._v("对于具体元素是谁，在并查集的内部并不关心，")]),n._v(" "),e("li",[n._v("在使用并查集的时候可以将元素和一个数组相对应的数组索引做一个映射")]),n._v(" "),e("li",[n._v("相当于真正关心的是一个 id 为 p 和 id 为 q 这样的两个元素它们是否相连，")]),n._v(" "),e("li",[n._v("对于 id 为 p 这样的元素它具体对应的是什么样的一个元素并不关心。")])])]),n._v(" "),e("li",[e("p",[n._v("unionElements 方法中传入的 p 和 q 都是 int 型。")])]),n._v(" "),e("li",[e("p",[n._v("向线段树一样，并不考虑添加一个元素或者删除一个元素")]),n._v(" "),e("ol",[e("li",[n._v("考虑的是对于当下固定的元素来说，")]),n._v(" "),e("li",[n._v("进行并或者查这样的两个操作。")])])])]),n._v(" "),e("h3",{attrs:{id:"代码示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码示例"}},[n._v("#")]),n._v(" 代码示例")]),n._v(" "),e("ol",[e("li",[e("p",[n._v("MyUnionFind")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\n")])])])])]),n._v(" "),e("h2",{attrs:{id:"并查集-简单实现-quick-find"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并查集-简单实现-quick-find"}},[n._v("#")]),n._v(" 并查集 简单实现 Quick Find")]),n._v(" "),e("ol",[e("li",[e("p",[n._v("对于并查集主要实现两个操作")]),n._v(" "),e("ol",[e("li",[n._v("union 操作将两个元素合并在一起变成在一个集合中的元素，")]),n._v(" "),e("li",[n._v("isConnected 操作查看两个元素是否是相连的")])])]),n._v(" "),e("li",[e("p",[n._v("并查集的基本数据表示")]),n._v(" "),e("ol",[e("li",[n._v("可以直接给每个数据做一个编号，")]),n._v(" "),e("li",[n._v("0-9 就表示 10 个不同的数据，")]),n._v(" "),e("li",[n._v("这是一种抽象的表示，")]),n._v(" "),e("li",[n._v("具体这十个编号可能是十个人或者是十部车或者是十本书，")]),n._v(" "),e("li",[n._v("这是由你的业务逻辑所决定的，")]),n._v(" "),e("li",[n._v("但是在并查集的内部只存 0-9 这是个编号，")]),n._v(" "),e("li",[n._v("它表示十个具体的元素")]),n._v(" "),e("li",[n._v("对于每一个元素它存储的是对应的集合的 ID。")]),n._v(" "),e("li",[n._v("例如下图并查集一中编号 0-4 这五个数据它们所对应的 ID 为 0，")]),n._v(" "),e("li",[n._v("编号为 5-9 这五个数据它们所对应的 ID 为 1，")]),n._v(" "),e("li",[n._v("不同的 ID 值就是不同的集合所对应的那个编号，")]),n._v(" "),e("li",[n._v("在并查集中就可以表示为 将这个十个数据分成了两个集合，")]),n._v(" "),e("li",[n._v("其中 0-4 这五个元素在一个集合中，5-9 这个五个元素在另一个集合中。")]),n._v(" "),e("li",[n._v("如果是下图并查集二中这样子，")]),n._v(" "),e("li",[n._v("其中 0、2、4、6、8 这五个元素在一个集合中，")]),n._v(" "),e("li",[n._v("而 1、3、5、7、9 这五个元素在一个集合中，")]),n._v(" "),e("li",[n._v("在具体的编程中会把这样的一个数组称之为 id，")]),n._v(" "),e("li",[n._v("通过这样的一个数组就可以非常容易的来回答所谓的连接问题，")]),n._v(" "),e("li",[n._v("在并查集图二中，0 和 2 就是相连接的，")]),n._v(" "),e("li",[n._v("或者说 0 和 2 是同属于一个集合的，因为他们所对应的 id 的值都是 0，")]),n._v(" "),e("li",[n._v("1 和 3 也属于同一个同一个集合，因为他们所对应的 id 值都为 1，")]),n._v(" "),e("li",[n._v("相应的可以想象 1 和 2 都属于不同的集合，因为他们对应的 id 值是不同的。")])])])]),n._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 并查集 一")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//     0   1   2   3   4   5   6   7   8   9")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//     -------------------------------------")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// id  0   0   0   0   0   1   1   1   1   1")]),n._v("\n \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 并查集 二")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//     0   1   2   3   4   5   6   7   8   9")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//     -------------------------------------")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// id  0   1   0   1   0   1   0   1   0   1")]),n._v("\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[e("p",[n._v("使用 id 这样的一个数组来存储你的数据")]),n._v(" "),e("ol",[e("li",[n._v("是可以很容易的回答 isConnected 的这个问题的，")]),n._v(" "),e("li",[n._v("只需要直接来看 p 和 q 这两个值所对应的 id 值是否一样就好了，")]),n._v(" "),e("li",[n._v("将查询 p 或者 q 每个元素背后所对应的那个集合的 id 是谁也")]),n._v(" "),e("li",[n._v("抽象成一个函数，这个函数就叫做 find，")]),n._v(" "),e("li",[n._v("只需要看"),e("code",[n._v("find(p)")]),n._v("是否等于"),e("code",[n._v("find(q)")]),n._v("就好了。")])])]),n._v(" "),e("li",[e("p",[n._v("当你使用 find 函数进行操作的时候只需要"),e("code",[n._v("O(1)")]),n._v("的时间复杂度")]),n._v(" "),e("ol",[e("li",[n._v("直接取出 id 这个数组所对应的这个数据的 Index 相应值即可，")]),n._v(" "),e("li",[n._v("所以对于这种存储方式在并查集上进行 find 操作时是非常快速的，")]),n._v(" "),e("li",[n._v("这种并查集的方式通常称为 QuickFind，")]),n._v(" "),e("li",[n._v("也就是对于 find 这种操作运算速度是非常快的。")])])])]),n._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 并查集")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//    0   1   2   3   4   5   6   7   8   9    ")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//     -------------------------------------")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// id  0   1   0   1   0   1   0   1   0   1")]),n._v("\n")])])]),e("ol",{attrs:{start:"5"}},[e("li",[e("p",[n._v("QuickFind 方式的并查集中实现 union")]),n._v(" "),e("ol",[e("li",[n._v("如果想要合并 1 和 4 这两个索引所对应的元素，也就是"),e("code",[n._v("union(1, 4)")]),n._v("，")]),n._v(" "),e("li",[n._v("1 所对应的集合的 id 是 1，4 所对应的集合的 id 是 0，")]),n._v(" "),e("li",[n._v("在这种情况下将 1 和 4 这两个元素合并以后，")]),n._v(" "),e("li",[n._v("其实 1 所属的那个集合和 4 所属的那个集合每一个元素相当于也连接了起来，")]),n._v(" "),e("li",[n._v("本来 1、3、5、7、9 它们是连接在一起的，0、2、4、6、8 它们是连接在一起的，")]),n._v(" "),e("li",[n._v("而 1 和 4 并没有连接起来，但是一旦你将 1 和 4 连接起来之后，")]),n._v(" "),e("li",[n._v("原本和 1 连接的其它元素以及原本和 4 连接的其它元素，")]),n._v(" "),e("li",[n._v("比如 5 和 2，它们其实也就都连接起来了，经过这样的操作之后，")]),n._v(" "),e("li",[n._v("所有的奇数所表示的元素和所有的偶数所表示的元素它们所对应的集合")]),n._v(" "),e("li",[n._v("的 id 值应该都会变成一样的，应该都是 0 或者都是 1，")]),n._v(" "),e("li",[n._v("具体取 0 还是取 1 都是无所谓的，只要他们的值是一样的就好了，")]),n._v(" "),e("li",[n._v("就会变成下图"),e("code",[n._v("union(1, 4)")]),n._v("后的并查集，")]),n._v(" "),e("li",[n._v("具体实现是对整个 id 数组进行一遍循环，")]),n._v(" "),e("li",[n._v("在循环的过程中将所有的 id 值等于 0 所对应的那个元素的 id 值都改写成 1，")]),n._v(" "),e("li",[n._v("正是因为如此 QuickFind 方式的并查集实现的 union 的时间复杂度是"),e("code",[n._v("O(n)")]),n._v("，")]),n._v(" "),e("li",[n._v("所以这个 union 操作需要改进，也就是创建一棵树，这棵树非常的奇怪，")]),n._v(" "),e("li",[n._v("是由孩子指向父亲的，而当前实现的这个并查集只是用数组模拟了一下而已。")])])])]),n._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 并查集")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//     0   1   2   3   4   5   6   7   8   9")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//     -------------------------------------")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// id  0   1   0   1   0   1   0   1   0   1")]),n._v("\n \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 并查集 union(1, 4)之后的并查集")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//     0   1   2   3   4   5   6   7   8   9")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("//     -------------------------------------")]),n._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// id  1   1   1   1   1   1   1   1   1   1 ")]),n._v("\n")])])]),e("h3",{attrs:{id:"代码示例-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码示例-2"}},[n._v("#")]),n._v(" 代码示例")]),n._v(" "),e("ol",[e("li",[e("p",[n._v("MyUnionFindOne")]),n._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 自定义并查集 UnionFind 第一个版本 QuickFind版")]),n._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// isConnected 操作很快")]),n._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("class")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("MyUnionFindOne")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\n\n\n   "),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("constructor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("size")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\n\n\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 存储数据所对应的集合的编号")]),n._v("\n\n\n\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("ids "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Array")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("size"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n\n\n \n\n\n\n      "),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 模拟存入数据")]),n._v("\n\n\n\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("const")]),n._v(" len "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("ids"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n\n\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("for")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("var")]),n._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v(" len"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" i"),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("ids"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n\n\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n\n\n \n\n\n\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 功能：将元素q和元素p这两个数据以及他们所在的集合进行合并")]),n._v("\n\n\n\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 时间复杂度：O(n)")]),n._v("\n\n\n\n   "),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("unionElements")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("q"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" p")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\n\n\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("const")]),n._v(" qId "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("find")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("q"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n\n\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("const")]),n._v(" pId "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("find")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n\n\n \n\n\n\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("qId "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("===")]),n._v(" pId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n\n\n \n\n\n\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("for")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("var")]),n._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("ids"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" i"),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\n\n\n         "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("pId "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("===")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("ids"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("ids"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" qId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n\n\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n\n\n \n\n\n\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 功能：查询元素q和元素p这两个数据是否在同一个集合中")]),n._v("\n\n\n\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 时间复杂度：O(1)")]),n._v("\n\n\n\n   "),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("isConnected")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("q"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(",")]),n._v(" p")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\n\n\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("ids"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("q"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("===")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("ids"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n\n\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n\n\n \n\n\n\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 查找元素所对应的集合编号")]),n._v("\n\n\n\n   "),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("find")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[n._v("index")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\n\n\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("if")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("index "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[n._v("0")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v("||")]),n._v(" index "),e("span",{pre:!0,attrs:{class:"token operator"}},[n._v(">=")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("ids"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n\n\n\n         "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("throw")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("new")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[n._v("Error")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[n._v("'index is out of bound.'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n\n\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("ids"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("[")]),n._v("index"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n\n\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n\n\n \n\n\n\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 功能：当前并查集一共考虑多少个元素")]),n._v("\n\n\n\n   "),e("span",{pre:!0,attrs:{class:"token function"}},[n._v("getSize")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n\n\n\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("return")]),n._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("ids"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n\n\n\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n\n\n\n复制代码\n")])])])])]),n._v(" "),e("h2",{attrs:{id:"并查集-简单实现-quick-union"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并查集-简单实现-quick-union"}},[n._v("#")]),n._v(" 并查集 简单实现 Quick Union")]),n._v(" "),e("ol",[e("li",[e("p",[n._v("QuickFind 的方式实现的并查集查找速度非常快")]),n._v(" "),e("ol",[e("li",[n._v("但是通常在标准情况下都是使用 QuickUnion 的方式实现并查集。")])])]),n._v(" "),e("li",[e("p",[n._v("QuickUnion 的方式实现并查集思路")]),n._v(" "),e("ol",[e("li",[n._v("将每一个元素，看作是一个节点，而节点之间相连接形成了一个树结构，")]),n._v(" "),e("li",[n._v("这棵树和之前实现的所有的树都不一样，")]),n._v(" "),e("li",[n._v("在并查集上实现的树结构是孩子指向父亲，")]),n._v(" "),e("li",[n._v("例如节点 3 指向节点 2，那么节点 2 就是这棵树的根节点，")]),n._v(" "),e("li",[n._v("虽然节点 2 是一个根节点，但是它也有一个指针，这个指针指向的是自己，")]),n._v(" "),e("li",[n._v("在这种情况下如果节点 1 要和节点 3 进行一个合并，")]),n._v(" "),e("li",[n._v("这个合并操作就是就是让节点 1 的指针指向节点 3 指向的这棵树的根节点，")]),n._v(" "),e("li",[n._v("也就是让节点 1 去指向节点 2。")]),n._v(" "),e("li",[n._v("如果又有一棵树 节点 7 和节点 6 都指向节点 5，节点 5 是这棵树的根节点，")]),n._v(" "),e("li",[n._v("但是如果要节点 7 要和节点 2 做一下合并，")]),n._v(" "),e("li",[n._v("其实就是就是让节点 7 所在的这棵树的根节点也就是节点 5 去指向节点 2，")]),n._v(" "),e("li",[n._v("或者你是想让节点 7 和节点 3 进行一下合并，")]),n._v(" "),e("li",[n._v("那么的得到的结果依然是这样的，因为实际的操作是让")]),n._v(" "),e("li",[n._v("节点 7 所在的这棵树的根节点去指向节点 3 所在的这棵树的根节点，")]),n._v(" "),e("li",[n._v("依然是节点 5 去指向节点 2，所以依然得到相同的结果，")]),n._v(" "),e("li",[n._v("这就是实际实现并查集相应的思路。")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//     (5)             (2)\n\n\n\n//    /   \\            |  \\\n\n\n\n//   /     \\           |   \\\n\n\n\n// (6)     (7)        (3)  (1)\n\n\n\n复制代码\n")])])])]),n._v(" "),e("li",[e("p",[n._v("QuickUnion 的方式实现并查集非常的简单")]),n._v(" "),e("ol",[e("li",[n._v("因为每一个节点本身只有一个指针，只会指向另外一个元素，")]),n._v(" "),e("li",[n._v("并且这个指针的存储依然可以使用数组的方式来存储，")]),n._v(" "),e("li",[n._v("这个数组就叫做 parent，")]),n._v(" "),e("li",[n._v("parent[i]就表示第 i 个元素所在的那个节点它指向了哪个元素，")]),n._v(" "),e("li",[n._v("虽然说是指针，但是实际存储的时候依然使用一个 int 型的数组就够了，")]),n._v(" "),e("li",[n._v("这样一来在初始化的时候"),e("code",[n._v("parent[i] = i")]),n._v("，")]),n._v(" "),e("li",[n._v("也就是初始化的时候每一个节点都没有和其它的节点进行合并，")]),n._v(" "),e("li",[n._v("所以在初始化的时候每一个节点都指向了自己，")]),n._v(" "),e("li",[n._v("在这种情况下相当于 以 10 个元素为例，并查集整体就是下图这样子，")]),n._v(" "),e("li",[n._v("每一个节点都是一个根节点，它们都指向自己。")]),n._v(" "),e("li",[n._v("严格的来说这个并查集不是一棵树结构，而是一个森林，")]),n._v(" "),e("li",[n._v("所谓的森林就是说里面有很多的树，在初始的情况下，")]),n._v(" "),e("li",[n._v("这个森林中就有 10 棵树，每棵树都只有一个节点，")]),n._v(" "),e("li",[n._v("如果进行"),e("code",[n._v("union(4, 3)")]),n._v("操作，")]),n._v(" "),e("li",[n._v("那么直接让节点 4 的的指针去指向节点 3 就好了，")]),n._v(" "),e("li",[n._v("这样的一个操作在数组中表示出来就是"),e("code",[n._v("parent[4] = 3")]),n._v("，")]),n._v(" "),e("li",[n._v("那么节点 4 它指向了节点 3，如果在进行"),e("code",[n._v("union(3, 8)")]),n._v("操作，")]),n._v(" "),e("li",[n._v("那么就让节点 3 的指针指向的那个元素指向节点 8，")]),n._v(" "),e("li",[n._v("那么在数组中"),e("code",[n._v("parent[3] = 8")]),n._v("，再进行"),e("code",[n._v("union(6, 5)")]),n._v("操作，")]),n._v(" "),e("li",[n._v("那么就让节点 6 的指针指向的那个元素指向节点 5，")]),n._v(" "),e("li",[n._v("也就是"),e("code",[n._v("parent[6] = 5")]),n._v("，再进行"),e("code",[n._v("union(9, 4)")]),n._v("操作，")]),n._v(" "),e("li",[n._v("那么就让节点 9 的指针指向指向节点 4 这棵树的根节点，")]),n._v(" "),e("li",[n._v("那么在这里就有一个查询操作了，")]),n._v(" "),e("li",[n._v("那么就要看一下 4 这个节点所在的根节点是谁，")]),n._v(" "),e("li",[n._v("这个查询过程就是 节点 4 指向了节点 3，节点 3 又指向了节点 8，")]),n._v(" "),e("li",[n._v("而节点 8 自己指向了节点 8 也就是指向了自己，说明 8 是一个根节点，")]),n._v(" "),e("li",[n._v("那么下面要做的事情就是让 9 这个节点指向节点 8 就好了")]),n._v(" "),e("li",[n._v("也就是"),e("code",[n._v("parent[9] = 8")]),n._v("，之所以不让节点 9 指向节点 4，")]),n._v(" "),e("li",[n._v("因为那样的话就会形成一个链表，那么树整体的优势就体现不出来，")]),n._v(" "),e("li",[n._v("当你的节点 9 指向节点 8，下次你查询节点 9 的根节点只需要进行一步查询，")]),n._v(" "),e("li",[n._v("所以才让"),e("code",[n._v("parent[9] = 8")]),n._v("，再进行"),e("code",[n._v("union(2, 1)")]),n._v("操作，")]),n._v(" "),e("li",[n._v("直接让节点 2 指向节点 1 就好了，"),e("code",[n._v("parent[2] = 1")]),n._v("，")]),n._v(" "),e("li",[n._v("再进行"),e("code",[n._v("union(5, 0)")]),n._v("操作，直接让节点 5 指向节点 0 就好了，")]),n._v(" "),e("li",[e("code",[n._v("parent[5] = 0")]),n._v("，再进行"),e("code",[n._v("union(7, 2)")]),n._v("操作，")]),n._v(" "),e("li",[n._v("由于节点 2 指向节点 1，那么节点 7 就要指向节点 1，")]),n._v(" "),e("li",[e("code",[n._v("parent[7] = 1")]),n._v("。")]),n._v(" "),e("li",[n._v("接下来进行一个稍微复杂一点的操作，进行"),e("code",[n._v("union(6, 2)")]),n._v("操作，")]),n._v(" "),e("li",[n._v("由于节点 6 指向节点 5，而节点 5 指向节点 0，2 指向节点 1，")]),n._v(" "),e("li",[n._v("那么就是让节点 0 指向节点 1 了，所以"),e("code",[n._v("parent[0] = 1")]),n._v("。")]),n._v(" "),e("li",[n._v("这样的一种实现就是并查集通常真正的实现方式。")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("//            0   1   2   3   4   5   6   7   8   9\n\n\n\n//            -------------------------------------\n\n\n\n//   parent   0   1   2   3   4   5   6   7   8   9\n\n\n\n//\n\n\n\n//                        Quick Union\n\n\n\n//   (0)   (1)   (2)   (3)   (4)   (5)   (6)   (7)   (8)   (9)\n\n\n\n//\n\n\n\n//   一通如下操作\n\n\n\n//   union(4, 3); // 4->3\n\n\n\n//   0   1   2   3   4   5   6   7   8   9\n\n\n\n//   -------------------------------------\n\n\n\n//   0   1   2   3   3   5   6   7   8   9\n\n\n\n//\n\n\n\n//   union(3, 8); // 3->8\n\n\n\n//   0   1   2   3   4   5   6   7   8   9\n\n\n\n//   -------------------------------------\n\n\n\n//   0   1   2   8   3   5   6   7   8   9\n\n\n\n//\n\n\n\n//   union(6, 5); // 6->5\n\n\n\n//   0   1   2   3   4   5   6   7   8   9\n\n\n\n//   -------------------------------------\n\n\n\n//   0   1   2   8   3   5   5   7   8   9\n\n\n\n//\n\n\n\n//   union(9, 4); // 4->3  3->8 所以 9->8\n\n\n\n//   0   1   2   3   4   5   6   7   8   9\n\n\n\n//   -------------------------------------\n\n\n\n//   0   1   2   8   3   5   5   7   8   8\n\n\n\n//\n\n\n\n//   union(2, 1); // 2->1\n\n\n\n//   0   1   2   3   4   5   6   7   8   9\n\n\n\n//   -------------------------------------\n\n\n\n//   0   1   1   8   3   5   5   7   8   8\n\n\n\n//\n\n\n\n//   union(5, 0); // 5->0\n\n\n\n//   0   1   2   3   4   5   6   7   8   9\n\n\n\n//   -------------------------------------\n\n\n\n//   0   1   1   8   3   0   5   7   8   8\n\n\n\n//\n\n\n\n//   union(7, 2); // 2->1 所以 7->1\n\n\n\n//   0   1   2   3   4   5   6   7   8   9\n\n\n\n//   -------------------------------------\n\n\n\n//   0   1   1   8   3   0   5   1   8   8\n\n\n\n//\n\n\n\n//   union(6, 2); // 6->5 5->0,2->1 所以0->1\n\n\n\n//   0   1   2   3   4   5   6   7   8   9\n\n\n\n//   -------------------------------------\n\n\n\n//   1   1   1   8   3   0   5   1   8   8\n\n\n\n复制代码\n")])])])]),n._v(" "),e("li",[e("p",[n._v("QuickUnion 的方式实现并查集中的 union 操作的时间复杂度是"),e("code",[n._v("O(h)")])]),n._v(" "),e("ol",[e("li",[n._v("这个 h 是当前 union 的这两个元素它所在的树相应的深度大小，")]),n._v(" "),e("li",[n._v("这个深度的大小在通常的情况下都比元素的个数 n 要小，")]),n._v(" "),e("li",[n._v("所以 union 的这个过程相对之前要快一些，")]),n._v(" "),e("li",[n._v("不过相应的代价就是 查询的过程相应的时间复杂度依然是树的深度大小，")]),n._v(" "),e("li",[n._v("所以就稍微牺牲了一些查询时相应的性能，")]),n._v(" "),e("li",[n._v("不过由于在通常情况下这棵树的高度是远远小于数据总量 n 的，")]),n._v(" "),e("li",[n._v("所以要让合并和查询这两个操作都是树的高度这个时间复杂度，")]),n._v(" "),e("li",[n._v("相应的在大多数运用中这个性能是可以接受的，")]),n._v(" "),e("li",[n._v("当然目前实现的并查集还是有很大的优化空间的。")])])]),n._v(" "),e("li",[e("p",[n._v("这个版本的并查集虽然是使用数组来进行存储的")]),n._v(" "),e("ol",[e("li",[n._v("但是它实际上是一种非常奇怪的树，这种树是由孩子指向父亲的。")])])])]),n._v(" "),e("h3",{attrs:{id:"代码示例-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码示例-3"}},[n._v("#")]),n._v(" 代码示例")]),n._v(" "),e("ol",[e("li",[e("p",[n._v("MyUnionFindTwo")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 自定义并查集 UnionFind 第二个版本 QuickUnion版\n\n\n\n// Union 操作变快了\n\n\n\n// 还可以更快的\n\n\n\nclass MyUnionFindTwo {\n\n\n\n   constructor(size) {\n\n\n\n      // 存储当前节点所指向的父节点\n\n\n\n      this.forest = new Array(size);\n\n\n\n \n\n\n\n      // 在初始的时候每一个节点都指向它自己\n\n\n\n      // 也就是每一个节点都是独立的一棵树\n\n\n\n      const len = this.forest.length;\n\n\n\n      for (var i = 0; i < len; i++) this.forest[i] = i;\n\n\n\n   }\n\n\n\n \n\n\n\n   // 功能：将元素q和元素p这两个数据以及他们所在的集合进行合并\n\n\n\n   // 时间复杂度：O(h) h 为树的高度\n\n\n\n   unionElements(treePrimary, treeSecondary) {\n\n\n\n      const primaryRoot = this.find(treePrimary);\n\n\n\n      const secondarRoot = this.find(treeSecondary);\n\n\n\n \n\n\n\n      if (primaryRoot === secondarRoot) return;\n\n\n\n \n\n\n\n      // 无论哪棵树往那棵树上进行合并 都一样，他们都是树\n\n\n\n      // 这里是主树节点上往次树节点进行合并\n\n\n\n      this.forest[primaryRoot] = this.forest[secondarRoot];\n\n\n\n   }\n\n\n\n \n\n\n\n   // 功能：查询元素q和元素p这两个数据是否在同一个集合中\n\n\n\n   // 时间复杂度：O(h) h 为树的高度\n\n\n\n   isConnected(treeQ, treeP) {\n\n\n\n      return this.find(treeQ) === this.find(treeP);\n\n\n\n   }\n\n\n\n \n\n\n\n   // 查找元素所对应的集合编号\n\n\n\n   find(id) {\n\n\n\n      if (id < 0 || id >= this.ids.length)\n\n\n\n         throw new Error('index is out of bound.');\n\n\n\n \n\n\n\n      // 不断的去查查找当前节点的根节点\n\n\n\n      // 根节点的索引是指向自己，如果根节点为 1 那么对应的索引也为 1。\n\n\n\n      while (id !== this.forest[id]) id = this.forest[id];\n\n\n\n \n\n\n\n      return id;\n\n\n\n   }\n\n\n\n \n\n\n\n   // 功能：当前并查集一共考虑多少个元素\n\n\n\n   getSize() {\n\n\n\n      return this.ids.length;\n\n\n\n   }\n\n\n\n}\n\n\n\n复制代码\n")])])])])]),n._v(" "),e("h2",{attrs:{id:"并查集-quick-union-基于-size-的优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并查集-quick-union-基于-size-的优化"}},[n._v("#")]),n._v(" 并查集 Quick Union 基于 Size 的优化")]),n._v(" "),e("ol",[e("li",[n._v("两版并查集的比较\n"),e("ol",[e("li",[n._v("第二版的 QuickUnion 方式的并查集和")]),n._v(" "),e("li",[n._v("第一版 QuickFind 方式的并查集在思路上有非常大的不同，")]),n._v(" "),e("li",[n._v("第一版的并查集实际上就是使用数组来模拟每个数据所属的集合是谁，")]),n._v(" "),e("li",[n._v("第二版的并查集虽然也是使用数组进行数据关系的存储，")]),n._v(" "),e("li",[n._v("但整体思路上和第一版的并查集是截然不同的，")]),n._v(" "),e("li",[n._v("因为让数据形成了一棵比较奇怪的树结构，更准确的说是森林结构，")]),n._v(" "),e("li",[n._v("在这个森林中每一棵树相应的节点之间的关系都是孩子指向父亲的，")]),n._v(" "),e("li",[n._v("这样一来可以通过任意的节点非常容易的查询到这棵树相应的根节点是谁，")]),n._v(" "),e("li",[n._v("那么相应的就知道了对于每一个节点来说它所属的集合编号是谁。")])])]),n._v(" "),e("li",[n._v("两个版本的并查集的性能\n"),e("ol",[e("li",[n._v("第一个版本的并查集 QuickFind，")]),n._v(" "),e("li",[n._v("isConnected：判断两个集合是否连接 对应时间复杂度是"),e("code",[n._v("O(1)")]),n._v("级别的，")]),n._v(" "),e("li",[n._v("union：将两个集合进行合并 对应时间复杂度是"),e("code",[n._v("O(n)")]),n._v("级别的。")]),n._v(" "),e("li",[n._v("第二个版本的并查集 QuickUnion，")]),n._v(" "),e("li",[n._v("isConnected：判断两个集合是否连接 对应时间复杂度是"),e("code",[n._v("O(h)")]),n._v("级别的，")]),n._v(" "),e("li",[n._v("union：将两个集合进行合并 对应时间复杂度是"),e("code",[n._v("O(h)")]),n._v("级别的。")])])]),n._v(" "),e("li",[n._v("在测试算法性能时候\n"),e("ol",[e("li",[n._v("很多时候实际测试的结果不仅仅和算法有关，")]),n._v(" "),e("li",[n._v("也和你使用的语言具体执行的时候底层运行的机制相关，")]),n._v(" "),e("li",[n._v("第一个版本的并查集 整体就是使用的一个数组，")]),n._v(" "),e("li",[n._v("合并的操作就是对一片连续的空间进行一次循环的操作，")]),n._v(" "),e("li",[n._v("比方说这样的操作在 一些强类型的 语言的底层会有非常好的优化，")]),n._v(" "),e("li",[n._v("所以运行速度会非常快。")]),n._v(" "),e("li",[n._v("而第二个版本的并查集 查询的过程其实是不断索引的过程，")]),n._v(" "),e("li",[n._v("它不是顺次的不断访问一片连续的空间，它要在不同的地址之间进行跳转，")]),n._v(" "),e("li",[n._v("因此它的速度就会相对的慢一些，")]),n._v(" "),e("li",[n._v("而且在第二个版本的并查集中 find 的复杂度是"),e("code",[n._v("O(h)")]),n._v("级别的，")]),n._v(" "),e("li",[n._v("无论是 isConnected 还是 union 都需要进行调用，")]),n._v(" "),e("li",[n._v("也就是说在第二个版本的并查集中的 isConnected 时间复杂度要比")]),n._v(" "),e("li",[n._v("第一个版本的并查集的 isConnected 时间复杂度要高的，")]),n._v(" "),e("li",[n._v("也就是更加的慢一些。")]),n._v(" "),e("li",[n._v("在第二个并查集中，")]),n._v(" "),e("li",[n._v("当你 union 的次数变得很大的时候，实际上就是将更多的元素组合在了一个集合中，")]),n._v(" "),e("li",[n._v("所以你得到的那棵树非常的大，可能还是一个退化的超长链表，")]),n._v(" "),e("li",[n._v("那么它相应的深度可能就会非常的高，")]),n._v(" "),e("li",[n._v("这就会使得 isConnected 的操作时的消耗也会非常的高，")]),n._v(" "),e("li",[n._v("所以可能会让第二个版本的并查集明明是"),e("code",[n._v("O(h)")]),n._v("级别的复杂度还比")]),n._v(" "),e("li",[n._v("第一个版本的并查集的"),e("code",[n._v("O(n)")]),n._v("级别的复杂度还要慢一些，")]),n._v(" "),e("li",[n._v("所以第二个版本的并查集还是有很大的优化空间的。")])])]),n._v(" "),e("li",[n._v("优化第二个版本的并查集\n"),e("ol",[e("li",[n._v("这个优化空间主要在于，在进行 union 操作的时候，")]),n._v(" "),e("li",[n._v("就直接将 q 这个元素的根节点直接去指向了 p 这个元素的根节点，")]),n._v(" "),e("li",[n._v("但是没有充分的考虑 q 和 p 这两个元素它所在的那两棵树的特点是怎样的，")]),n._v(" "),e("li",[n._v("如果不对要合并的那两个元素所在的树的形状不去做判断，")]),n._v(" "),e("li",[n._v("很多时候这个合并的过程会不断的增加树的高度，")]),n._v(" "),e("li",[n._v("甚至在一些极端的情况下得到的这棵树是一条链表的样子。")])])]),n._v(" "),e("li",[n._v("简单的解决方案：考虑 size\n"),e("ol",[e("li",[n._v("去考虑当前这棵树它整体有多少个节点，")]),n._v(" "),e("li",[n._v("也就是让节点少的那棵树去指向节点多的那棵树，")]),n._v(" "),e("li",[n._v("这样就高概率的让形成的那棵树它的深度相对的会比较低，")]),n._v(" "),e("li",[n._v("这个优化的思路其实是非常简单的。")]),n._v(" "),e("li",[n._v("而且肯定不会退化为一个链表，")]),n._v(" "),e("li",[n._v("因为可以保证最后形成的那棵树相对是比较浅的，")]),n._v(" "),e("li",[n._v("对于"),e("code",[n._v("O(h)")]),n._v("的时间复杂度来说，h 越小它的时间复杂就会越小，")]),n._v(" "),e("li",[n._v("这样的简单优化让性能有了巨大的提升。")]),n._v(" "),e("li",[n._v("但是还可以继续进行优化。")])])])]),n._v(" "),e("h3",{attrs:{id:"代码示例-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码示例-4"}},[n._v("#")]),n._v(" 代码示例")]),n._v(" "),e("ol",[e("li",[e("p",[e("code",[n._v("(class: MyUnionFindOne, class: MyUnionFindTwo, class: MyUnionFindThree, class: PerformanceTest, class: Main)")])])]),n._v(" "),e("li",[e("p",[n._v("MyUnionFindOne")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 自定义并查集 UnionFind 第一个版本 QuickFind版\n\n\n\n// isConnected 操作很快\n\n\n\nclass MyUnionFindOne {\n\n\n\n   constructor(size) {\n\n\n\n      // 存储数据所对应的集合的编号\n\n\n\n      this.ids = new Array(size);\n\n\n\n \n\n\n\n      // 模拟存入数据\n\n\n\n      const len = this.ids.length;\n\n\n\n      for (var i = 0; i < len; i++) this.ids[i] = i;\n\n\n\n   }\n\n\n\n \n\n\n\n   // 功能：将元素q和元素p这两个数据以及他们所在的集合进行合并\n\n\n\n   // 时间复杂度：O(n)\n\n\n\n   unionElements(q, p) {\n\n\n\n      const qId = this.find(q);\n\n\n\n      const pId = this.find(p);\n\n\n\n \n\n\n\n      if (qId === pId) return;\n\n\n\n \n\n\n\n      for (var i = 0; i < this.ids.length; i++)\n\n\n\n         if (pId === this.ids[i]) this.ids[i] = qId;\n\n\n\n   }\n\n\n\n \n\n\n\n   // 功能：查询元素q和元素p这两个数据是否在同一个集合中\n\n\n\n   // 时间复杂度：O(1)\n\n\n\n   isConnected(q, p) {\n\n\n\n      return this.ids[q] === this.ids[p];\n\n\n\n   }\n\n\n\n \n\n\n\n   // 查找元素所对应的集合编号\n\n\n\n   find(index) {\n\n\n\n      if (index < 0 || index >= this.ids.length)\n\n\n\n         throw new Error('index is out of bound.');\n\n\n\n      return this.ids[index];\n\n\n\n   }\n\n\n\n \n\n\n\n   // 功能：当前并查集一共考虑多少个元素\n\n\n\n   getSize() {\n\n\n\n      return this.ids.length;\n\n\n\n   }\n\n\n\n}\n\n\n\n复制代码\n")])])])]),n._v(" "),e("li",[e("p",[n._v("MyUnionFindTwo")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 自定义并查集 UnionFind 第二个版本 QuickUnion版\n\n\n\n// Union 操作变快了\n\n\n\n// 还可以更快的\n\n\n\nclass MyUnionFindTwo {\n\n\n\n   constructor(size) {\n\n\n\n      // 存储当前节点所指向的父节点\n\n\n\n      this.forest = new Array(size);\n\n\n\n \n\n\n\n      // 在初始的时候每一个节点都指向它自己\n\n\n\n      // 也就是每一个节点都是独立的一棵树\n\n\n\n      const len = this.forest.length;\n\n\n\n      for (var i = 0; i < len; i++) this.forest[i] = i;\n\n\n\n   }\n\n\n\n \n\n\n\n   // 功能：将元素q和元素p这两个数据以及他们所在的集合进行合并\n\n\n\n   // 时间复杂度：O(h) h 为树的高度\n\n\n\n   unionElements(treePrimary, treeSecondary) {\n\n\n\n      const primaryRoot = this.find(treePrimary);\n\n\n\n      const secondarRoot = this.find(treeSecondary);\n\n\n\n \n\n\n\n      if (primaryRoot === secondarRoot) return;\n\n\n\n \n\n\n\n      // 无论哪棵树往那棵树上进行合并 都一样，他们都是树\n\n\n\n      // 这里是主树节点上往次树节点进行合并\n\n\n\n      this.forest[primaryRoot] = this.forest[secondarRoot];\n\n\n\n   }\n\n\n\n \n\n\n\n   // 功能：查询元素q和元素p这两个数据是否在同一个集合中\n\n\n\n   // 时间复杂度：O(h) h 为树的高度\n\n\n\n   isConnected(treeQ, treeP) {\n\n\n\n      return this.find(treeQ) === this.find(treeP);\n\n\n\n   }\n\n\n\n \n\n\n\n   // 查找元素所对应的集合编号\n\n\n\n   find(id) {\n\n\n\n      if (id < 0 || id >= this.forest.length)\n\n\n\n         throw new Error('index is out of bound.');\n\n\n\n \n\n\n\n      // 不断的去查查找当前节点的根节点\n\n\n\n      // 根节点的索引是指向自己，如果根节点为 1 那么对应的索引也为 1。\n\n\n\n      while (id !== this.forest[id]) id = this.forest[id];\n\n\n\n \n\n\n\n      return id;\n\n\n\n   }\n\n\n\n \n\n\n\n   // 功能：当前并查集一共考虑多少个元素\n\n\n\n   getSize() {\n\n\n\n      return this.forest.length;\n\n\n\n   }\n\n\n\n}\n\n\n\n复制代码\n")])])])]),n._v(" "),e("li",[e("p",[n._v("MyUnionFindThree")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 自定义并查集 UnionFind 第三个版本 QuickUnion优化版\n\n\n\n// Union 操作变快了\n\n\n\n// 还可以更快的\n\n\n\n// 解决方案：考虑size 也就是某一棵树从根节点开始一共有多少个节点\n\n\n\n// 原理：节点少的向节点多的树进行融合\n\n\n\n// 还可以更快的\n\n\n\nclass MyUnionFindThree {\n\n\n\n   constructor(size) {\n\n\n\n      // 存储当前节点所指向的父节点\n\n\n\n      this.forest = new Array(size);\n\n\n\n      // 以以某个节点为根的所有子节点的个数\n\n\n\n      this.branch = new Array(size);\n\n\n\n \n\n\n\n      // 在初始的时候每一个节点都指向它自己\n\n\n\n      // 也就是每一个节点都是独立的一棵树\n\n\n\n      const len = this.forest.length;\n\n\n\n      for (var i = 0; i < len; i++) {\n\n\n\n         this.forest[i] = i;\n\n\n\n         this.branch[i] = 1; // 默认节点个数为1\n\n\n\n      }\n\n\n\n   }\n\n\n\n \n\n\n\n   // 功能：将元素q和元素p这两个数据以及他们所在的集合进行合并\n\n\n\n   // 时间复杂度：O(h) h 为树的高度\n\n\n\n   unionElements(treePrimary, treeSecondary) {\n\n\n\n      const primaryRoot = this.find(treePrimary);\n\n\n\n      const secondarRoot = this.find(treeSecondary);\n\n\n\n \n\n\n\n      if (primaryRoot === secondarRoot) return;\n\n\n\n \n\n\n\n      // 节点少的 树 往 节点多的树 进行合并，在一定程度上减少最终树的高度\n\n\n\n      if (this.branch[primaryRoot] < this.branch[secondarRoot]) {\n\n\n\n         // 主树节点上往次树节点进行合并\n\n\n\n         this.forest[primaryRoot] = this.forest[secondarRoot];\n\n\n\n         // 次树的节点个数 += 主树的节点个数\n\n\n\n         this.branch[secondarRoot] += this.branch[primaryRoot];\n\n\n\n      } else {\n\n\n\n         // branch[primaryRoot] >= branch[secondarRoot]\n\n\n\n         // 次树节点上往主树节点进行合并\n\n\n\n         this.forest[secondarRoot] = this.forest[primaryRoot];\n\n\n\n         // 主树的节点个数 += 次树的节点个数\n\n\n\n         this.branch[primaryRoot] += this.branch[secondarRoot];\n\n\n\n      }\n\n\n\n   }\n\n\n\n \n\n\n\n   // 功能：查询元素q和元素p这两个数据是否在同一个集合中\n\n\n\n   // 时间复杂度：O(h) h 为树的高度\n\n\n\n   isConnected(treeQ, treeP) {\n\n\n\n      return this.find(treeQ) === this.find(treeP);\n\n\n\n   }\n\n\n\n \n\n\n\n   // 查找元素所对应的集合编号\n\n\n\n   find(id) {\n\n\n\n      if (id < 0 || id >= this.forest.length)\n\n\n\n         throw new Error('index is out of bound.');\n\n\n\n \n\n\n\n      // 不断的去查查找当前节点的根节点\n\n\n\n      // 根节点的索引是指向自己，如果根节点为 1 那么对应的索引也为 1。\n\n\n\n      while (id !== this.forest[id]) id = this.forest[id];\n\n\n\n \n\n\n\n      return id;\n\n\n\n   }\n\n\n\n \n\n\n\n   // 功能：当前并查集一共考虑多少个元素\n\n\n\n   getSize() {\n\n\n\n      return this.forest.length;\n\n\n\n   }\n\n\n\n}\n\n\n\n复制代码\n")])])])]),n._v(" "),e("li",[e("p",[n._v("PerformanceTest")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 性能测试\n\n\n\nclass PerformanceTest {\n\n\n\n   constructor() {}\n\n\n\n \n\n\n\n   // 对比队列\n\n\n\n   testQueue(queue, openCount) {\n\n\n\n      let startTime = Date.now();\n\n\n\n \n\n\n\n      let random = Math.random;\n\n\n\n      for (var i = 0; i < openCount; i++) {\n\n\n\n         queue.enqueue(random() * openCount);\n\n\n\n      }\n\n\n\n \n\n\n\n      while (!queue.isEmpty()) {\n\n\n\n         queue.dequeue();\n\n\n\n      }\n\n\n\n \n\n\n\n      let endTime = Date.now();\n\n\n\n \n\n\n\n      return this.calcTime(endTime - startTime);\n\n\n\n   }\n\n\n\n \n\n\n\n   // 对比栈\n\n\n\n   testStack(stack, openCount) {\n\n\n\n      let startTime = Date.now();\n\n\n\n \n\n\n\n      let random = Math.random;\n\n\n\n      for (var i = 0; i < openCount; i++) {\n\n\n\n         stack.push(random() * openCount);\n\n\n\n      }\n\n\n\n \n\n\n\n      while (!stack.isEmpty()) {\n\n\n\n         stack.pop();\n\n\n\n      }\n\n\n\n \n\n\n\n      let endTime = Date.now();\n\n\n\n \n\n\n\n      return this.calcTime(endTime - startTime);\n\n\n\n   }\n\n\n\n \n\n\n\n   // 对比集合\n\n\n\n   testSet(set, openCount) {\n\n\n\n      let startTime = Date.now();\n\n\n\n \n\n\n\n      let random = Math.random;\n\n\n\n      let arr = [];\n\n\n\n      let temp = null;\n\n\n\n \n\n\n\n      // 第一遍测试\n\n\n\n      for (var i = 0; i < openCount; i++) {\n\n\n\n         temp = random();\n\n\n\n         // 添加重复元素，从而测试集合去重的能力\n\n\n\n         set.add(temp * openCount);\n\n\n\n         set.add(temp * openCount);\n\n\n\n \n\n\n\n         arr.push(temp * openCount);\n\n\n\n      }\n\n\n\n \n\n\n\n      for (var i = 0; i < openCount; i++) {\n\n\n\n         set.remove(arr[i]);\n\n\n\n      }\n\n\n\n \n\n\n\n      // 第二遍测试\n\n\n\n      for (var i = 0; i < openCount; i++) {\n\n\n\n         set.add(arr[i]);\n\n\n\n         set.add(arr[i]);\n\n\n\n      }\n\n\n\n \n\n\n\n      while (!set.isEmpty()) {\n\n\n\n         set.remove(arr[set.getSize() - 1]);\n\n\n\n      }\n\n\n\n \n\n\n\n      let endTime = Date.now();\n\n\n\n \n\n\n\n      // 求出两次测试的平均时间\n\n\n\n      let avgTime = Math.ceil((endTime - startTime) / 2);\n\n\n\n \n\n\n\n      return this.calcTime(avgTime);\n\n\n\n   }\n\n\n\n \n\n\n\n   // 对比映射\n\n\n\n   testMap(map, openCount) {\n\n\n\n      let startTime = Date.now();\n\n\n\n \n\n\n\n      let array = new MyArray();\n\n\n\n      let random = Math.random;\n\n\n\n      let temp = null;\n\n\n\n      let result = null;\n\n\n\n      for (var i = 0; i < openCount; i++) {\n\n\n\n         temp = random();\n\n\n\n         result = openCount * temp;\n\n\n\n         array.add(result);\n\n\n\n         array.add(result);\n\n\n\n         array.add(result);\n\n\n\n         array.add(result);\n\n\n\n      }\n\n\n\n \n\n\n\n      for (var i = 0; i < array.getSize(); i++) {\n\n\n\n         result = array.get(i);\n\n\n\n         if (map.contains(result)) map.add(result, map.get(result) + 1);\n\n\n\n         else map.add(result, 1);\n\n\n\n      }\n\n\n\n \n\n\n\n      for (var i = 0; i < array.getSize(); i++) {\n\n\n\n         result = array.get(i);\n\n\n\n         map.remove(result);\n\n\n\n      }\n\n\n\n \n\n\n\n      let endTime = Date.now();\n\n\n\n \n\n\n\n      return this.calcTime(endTime - startTime);\n\n\n\n   }\n\n\n\n \n\n\n\n   // 对比堆 主要对比 使用heapify 与 不使用heapify时的性能\n\n\n\n   testHeap(heap, array, isHeapify) {\n\n\n\n      const startTime = Date.now();\n\n\n\n \n\n\n\n      // 是否支持 heapify\n\n\n\n      if (isHeapify) heap.heapify(array);\n\n\n\n      else {\n\n\n\n         for (const element of array) heap.add(element);\n\n\n\n      }\n\n\n\n \n\n\n\n      console.log('heap size:' + heap.size() + '\\r\\n');\n\n\n\n      document.body.innerHTML += 'heap size:' + heap.size() + '<br /><br />';\n\n\n\n \n\n\n\n      // 使用数组取值\n\n\n\n      let arr = new Array(heap.size());\n\n\n\n      for (let i = 0; i < arr.length; i++) arr[i] = heap.extractMax();\n\n\n\n \n\n\n\n      console.log(\n\n\n\n         'Array size:' + arr.length + '，heap size:' + heap.size() + '\\r\\n'\n\n\n\n      );\n\n\n\n      document.body.innerHTML +=\n\n\n\n         'Array size:' +\n\n\n\n         arr.length +\n\n\n\n         '，heap size:' +\n\n\n\n         heap.size() +\n\n\n\n         '<br /><br />';\n\n\n\n \n\n\n\n      // 检验一下是否符合要求\n\n\n\n      for (let i = 1; i < arr.length; i++)\n\n\n\n         if (arr[i - 1] < arr[i]) throw new Error('error.');\n\n\n\n \n\n\n\n      console.log('test heap completed.' + '\\r\\n');\n\n\n\n      document.body.innerHTML += 'test heap completed.' + '<br /><br />';\n\n\n\n \n\n\n\n      const endTime = Date.now();\n\n\n\n      return this.calcTime(endTime - startTime);\n\n\n\n   }\n\n\n\n \n\n\n\n   // 对比并查集\n\n\n\n   testUnionFind(unionFind, openCount, primaryArray, secondaryArray) {\n\n\n\n      const size = unionFind.getSize();\n\n\n\n      const random = Math.random;\n\n\n\n \n\n\n\n      return this.testCustomFn(function() {\n\n\n\n         // 合并操作\n\n\n\n         for (var i = 0; i < openCount; i++) {\n\n\n\n            let primaryId = primaryArray[i];\n\n\n\n            let secondaryId = secondaryArray[i];\n\n\n\n \n\n\n\n            unionFind.unionElements(primaryId, secondaryId);\n\n\n\n         }\n\n\n\n \n\n\n\n         // 查询连接操作\n\n\n\n         for (var i = 0; i < openCount; i++) {\n\n\n\n            let primaryRandomId = Math.floor(random() * size);\n\n\n\n            let secondaryRandomId = Math.floor(random() * size);\n\n\n\n \n\n\n\n            unionFind.unionElements(primaryRandomId, secondaryRandomId);\n\n\n\n         }\n\n\n\n      });\n\n\n\n   }\n\n\n\n \n\n\n\n   // 计算运行的时间，转换为 天-小时-分钟-秒-毫秒\n\n\n\n   calcTime(result) {\n\n\n\n      //获取距离的天数\n\n\n\n      var day = Math.floor(result / (24 * 60 * 60 * 1000));\n\n\n\n \n\n\n\n      //获取距离的小时数\n\n\n\n      var hours = Math.floor((result / (60 * 60 * 1000)) % 24);\n\n\n\n \n\n\n\n      //获取距离的分钟数\n\n\n\n      var minutes = Math.floor((result / (60 * 1000)) % 60);\n\n\n\n \n\n\n\n      //获取距离的秒数\n\n\n\n      var seconds = Math.floor((result / 1000) % 60);\n\n\n\n \n\n\n\n      //获取距离的毫秒数\n\n\n\n      var milliSeconds = Math.floor(result % 1000);\n\n\n\n \n\n\n\n      // 计算时间\n\n\n\n      day = day < 10 ? '0' + day : day;\n\n\n\n      hours = hours < 10 ? '0' + hours : hours;\n\n\n\n      minutes = minutes < 10 ? '0' + minutes : minutes;\n\n\n\n      seconds = seconds < 10 ? '0' + seconds : seconds;\n\n\n\n      milliSeconds =\n\n\n\n         milliSeconds < 100\n\n\n\n            ? milliSeconds < 10\n\n\n\n               ? '00' + milliSeconds\n\n\n\n               : '0' + milliSeconds\n\n\n\n            : milliSeconds;\n\n\n\n \n\n\n\n      // 输出耗时字符串\n\n\n\n      result =\n\n\n\n         day +\n\n\n\n         '天' +\n\n\n\n         hours +\n\n\n\n         '小时' +\n\n\n\n         minutes +\n\n\n\n         '分' +\n\n\n\n         seconds +\n\n\n\n         '秒' +\n\n\n\n         milliSeconds +\n\n\n\n         '毫秒' +\n\n\n\n         '  <<<<============>>>>  总毫秒数：' +\n\n\n\n         result;\n\n\n\n \n\n\n\n      return result;\n\n\n\n   }\n\n\n\n \n\n\n\n   // 自定义对比\n\n\n\n   testCustomFn(fn) {\n\n\n\n      let startTime = Date.now();\n\n\n\n \n\n\n\n      fn();\n\n\n\n \n\n\n\n      let endTime = Date.now();\n\n\n\n \n\n\n\n      return this.calcTime(endTime - startTime);\n\n\n\n   }\n\n\n\n}\n\n\n\n复制代码\n")])])])]),n._v(" "),e("li",[e("p",[n._v("Main")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// main 函数\n\n\n\nclass Main {\n\n\n\n   constructor() {\n\n\n\n      this.alterLine('UnionFind Comparison Area');\n\n\n\n      // 十万级别\n\n\n\n      const size = 100000; // 并查集维护节点数\n\n\n\n      const openCount = 100000; // 操作数\n\n\n\n \n\n\n\n      // 生成同一份测试数据的辅助代码\n\n\n\n      const random = Math.random;\n\n\n\n      const primaryArray = new Array(openCount);\n\n\n\n      const secondaryArray = new Array(openCount);\n\n\n\n \n\n\n\n      // 生成同一份测试数据\n\n\n\n      for (var i = 0; i < openCount; i++) {\n\n\n\n         primaryArray[i] = Math.floor(random() * size);\n\n\n\n         secondaryArray[i] = Math.floor(random() * size);\n\n\n\n      }\n\n\n\n \n\n\n\n      // 开始测试\n\n\n\n      const myUnionFindOne = new MyUnionFindOne(size);\n\n\n\n      const myUnionFindTwo = new MyUnionFindTwo(size);\n\n\n\n      const myUnionFindThree = new MyUnionFindThree(size);\n\n\n\n      const performanceTest = new PerformanceTest();\n\n\n\n \n\n\n\n      // 测试后获取测试信息\n\n\n\n      const myUnionFindOneInfo = performanceTest.testUnionFind(\n\n\n\n         myUnionFindOne,\n\n\n\n         openCount,\n\n\n\n         primaryArray,\n\n\n\n         secondaryArray\n\n\n\n      );\n\n\n\n      const myUnionFindTwoInfo = performanceTest.testUnionFind(\n\n\n\n         myUnionFindTwo,\n\n\n\n         openCount,\n\n\n\n         primaryArray,\n\n\n\n         secondaryArray\n\n\n\n      );\n\n\n\n      const myUnionFindThreeInfo = performanceTest.testUnionFind(\n\n\n\n         myUnionFindThree,\n\n\n\n         openCount,\n\n\n\n         primaryArray,\n\n\n\n         secondaryArray\n\n\n\n      );\n\n\n\n \n\n\n\n      // 总毫秒数：24143\n\n\n\n      console.log(\n\n\n\n         'MyUnionFindOne time：' + myUnionFindOneInfo,\n\n\n\n         myUnionFindOne\n\n\n\n      );\n\n\n\n      this.show('MyUnionFindOne time：' + myUnionFindOneInfo);\n\n\n\n      // 总毫秒数：32050\n\n\n\n      console.log(\n\n\n\n         'MyUnionFindTwo time：' + myUnionFindTwoInfo,\n\n\n\n         myUnionFindTwo\n\n\n\n      );\n\n\n\n      this.show('MyUnionFindTwo time：' + myUnionFindTwoInfo);\n\n\n\n      // 总毫秒数：69\n\n\n\n      console.log(\n\n\n\n         'MyUnionFindThree time：' + myUnionFindThreeInfo,\n\n\n\n         myUnionFindThree\n\n\n\n      );\n\n\n\n      this.show('MyUnionFindThree time：' + myUnionFindThreeInfo);\n\n\n\n   }\n\n\n\n \n\n\n\n   // 将内容显示在页面上\n\n\n\n   show(content) {\n\n\n\n      document.body.innerHTML += `${content}<br /><br />`;\n\n\n\n   }\n\n\n\n \n\n\n\n   // 展示分割线\n\n\n\n   alterLine(title) {\n\n\n\n      let line = `--------------------${title}----------------------`;\n\n\n\n      console.log(line);\n\n\n\n      document.body.innerHTML += `${line}<br /><br />`;\n\n\n\n   }\n\n\n\n}\n\n\n\n \n\n\n\n// 页面加载完毕\n\n\n\nwindow.onload = function() {\n\n\n\n   // 执行主函数\n\n\n\n   new Main();\n\n\n\n};\n\n\n\n复制代码\n")])])])])]),n._v(" "),e("h2",{attrs:{id:"并查集-quick-union-基于-rank-的优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并查集-quick-union-基于-rank-的优化"}},[n._v("#")]),n._v(" 并查集 Quick Union 基于 Rank 的优化")]),n._v(" "),e("ol",[e("li",[n._v("这个 rank 就是指树的高度或树的深度\n"),e("ol",[e("li",[n._v("之所以不叫做 height 和 depth，")]),n._v(" "),e("li",[n._v("是因为进行路径压缩的时候并不会维护这个 rank 了，")]),n._v(" "),e("li",[n._v("rank 只在 union 中进行维护，")]),n._v(" "),e("li",[n._v("这个 rank 准确的来说只是一个粗略的排名或者序而已，")]),n._v(" "),e("li",[n._v("并不是很准确的存储了树的高度或深度。")])])]),n._v(" "),e("li",[n._v("rank 的优化是基于 size 优化的基础上进行的\n"),e("ol",[e("li",[n._v("最好的优化方式是记录每一个节点的根节点的最大深度是多少，")]),n._v(" "),e("li",[n._v("这样才能够在合并的时候，")]),n._v(" "),e("li",[n._v("让深度比较低的那棵树向深度比较高的那棵树进行合并，")]),n._v(" "),e("li",[n._v("这样整体更加的合理，这样的一种优化方案就称之为 rank 的优化，")]),n._v(" "),e("li",[n._v("这个 rank 依然可以使用一个数组来进行记录，")]),n._v(" "),e("li",[n._v("其中"),e("code",[n._v("rank[i]")]),n._v("表示根节点为 i 的树的高度是多少。")])])]),n._v(" "),e("li",[n._v("rank 的优化性能其实和 size 优化的性能差不了多少\n"),e("ol",[e("li",[n._v("但是当数据量达到千万这个程度的时候，")]),n._v(" "),e("li",[n._v("就会有一点差距了，差距也不是有点大，就一两秒左右。")]),n._v(" "),e("li",[n._v("所以还是有优化空间的。")])])])]),n._v(" "),e("h3",{attrs:{id:"代码示例-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码示例-5"}},[n._v("#")]),n._v(" 代码示例")]),n._v(" "),e("ol",[e("li",[e("p",[e("code",[n._v("(class: MyUnionFindThree, class: MyUnionFindFour, class: PerformanceTest, class: Main)")])])]),n._v(" "),e("li",[e("p",[n._v("MyUnionFindThree")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 自定义并查集 UnionFind 第三个版本 QuickUnion优化版\n\n\n\n// Union 操作变快了\n\n\n\n// 还可以更快的\n\n\n\n// 解决方案：考虑size 也就是某一棵树从根节点开始一共有多少个节点\n\n\n\n// 原理：节点少的向节点多的树进行融合\n\n\n\n// 还可以更快的\n\n\n\nclass MyUnionFindThree {\n\n\n\n   constructor(size) {\n\n\n\n      // 存储当前节点所指向的父节点\n\n\n\n      this.forest = new Array(size);\n\n\n\n      // 以以某个节点为根的所有子节点的个数\n\n\n\n      this.branch = new Array(size);\n\n\n\n \n\n\n\n      // 在初始的时候每一个节点都指向它自己\n\n\n\n      // 也就是每一个节点都是独立的一棵树\n\n\n\n      const len = this.forest.length;\n\n\n\n      for (var i = 0; i < len; i++) {\n\n\n\n         this.forest[i] = i;\n\n\n\n         this.branch[i] = 1; // 默认节点个数为1\n\n\n\n      }\n\n\n\n   }\n\n\n\n \n\n\n\n   // 功能：将元素q和元素p这两个数据以及他们所在的集合进行合并\n\n\n\n   // 时间复杂度：O(h) h 为树的高度\n\n\n\n   unionElements(treePrimary, treeSecondary) {\n\n\n\n      const primaryRoot = this.find(treePrimary);\n\n\n\n      const secondarRoot = this.find(treeSecondary);\n\n\n\n \n\n\n\n      if (primaryRoot === secondarRoot) return;\n\n\n\n \n\n\n\n      // 节点少的 树 往 节点多的树 进行合并，在一定程度上减少最终树的高度\n\n\n\n      if (this.branch[primaryRoot] < this.branch[secondarRoot]) {\n\n\n\n         // 主树节点上往次树节点进行合并\n\n\n\n         this.forest[primaryRoot] = this.forest[secondarRoot];\n\n\n\n         // 次树的节点个数 += 主树的节点个数\n\n\n\n         this.branch[secondarRoot] += this.branch[primaryRoot];\n\n\n\n      } else {\n\n\n\n         // branch[primaryRoot] >= branch[secondarRoot]\n\n\n\n         // 次树节点上往主树节点进行合并\n\n\n\n         this.forest[secondarRoot] = this.forest[primaryRoot];\n\n\n\n         // 主树的节点个数 += 次树的节点个数\n\n\n\n         this.branch[primaryRoot] += this.branch[secondarRoot];\n\n\n\n      }\n\n\n\n   }\n\n\n\n \n\n\n\n   // 功能：查询元素q和元素p这两个数据是否在同一个集合中\n\n\n\n   // 时间复杂度：O(h) h 为树的高度\n\n\n\n   isConnected(treeQ, treeP) {\n\n\n\n      return this.find(treeQ) === this.find(treeP);\n\n\n\n   }\n\n\n\n \n\n\n\n   // 查找元素所对应的集合编号\n\n\n\n   find(id) {\n\n\n\n      if (id < 0 || id >= this.forest.length)\n\n\n\n         throw new Error('index is out of bound.');\n\n\n\n \n\n\n\n      // 不断的去查查找当前节点的根节点\n\n\n\n      // 根节点的索引是指向自己，如果根节点为 1 那么对应的索引也为 1。\n\n\n\n      while (id !== this.forest[id]) id = this.forest[id];\n\n\n\n \n\n\n\n      return id;\n\n\n\n   }\n\n\n\n \n\n\n\n   // 功能：当前并查集一共考虑多少个元素\n\n\n\n   getSize() {\n\n\n\n      return this.forest.length;\n\n\n\n   }\n\n\n\n}\n\n\n\n复制代码\n")])])])]),n._v(" "),e("li",[e("p",[n._v("MyUnionFindFour")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 自定义并查集 UnionFind 第四个版本 QuickUnion优化版\n\n\n\n// Union 操作变快了\n\n\n\n// 还可以更快的\n\n\n\n// 解决方案：考虑rank 也就是某一棵树从根节点开始计算最大深度是多少\n\n\n\n// 原理：让深度比较低的那棵树向深度比较高的那棵树进行合并\n\n\n\n// 还可以更快的\n\n\n\nclass MyUnionFindFour {\n\n\n\n   constructor(size) {\n\n\n\n      // 存储当前节点所指向的父节点\n\n\n\n      this.forest = new Array(size);\n\n\n\n      // 记录某个节点为根的树的最大高度或深度\n\n\n\n      this.rank = new Array(size);\n\n\n\n \n\n\n\n      // 在初始的时候每一个节点都指向它自己\n\n\n\n      // 也就是每一个节点都是独立的一棵树\n\n\n\n      const len = this.forest.length;\n\n\n\n      for (var i = 0; i < len; i++) {\n\n\n\n         this.forest[i] = i;\n\n\n\n         this.rank[i] = 1; // 默认深度为1\n\n\n\n      }\n\n\n\n   }\n\n\n\n \n\n\n\n   // 功能：将元素q和元素p这两个数据以及他们所在的集合进行合并\n\n\n\n   // 时间复杂度：O(h) h 为树的高度\n\n\n\n   unionElements(treePrimary, treeSecondary) {\n\n\n\n      const primaryRoot = this.find(treePrimary);\n\n\n\n      const secondarRoot = this.find(treeSecondary);\n\n\n\n \n\n\n\n      if (primaryRoot === secondarRoot) return;\n\n\n\n \n\n\n\n      // 根据两个元素所在树的rank不同判断合并方向\n\n\n\n      // 将rank低的集合合并到rank高的集合上\n\n\n\n      if (this.rank[primaryRoot] < this.rank[secondarRoot]) {\n\n\n\n         // 主树节点上往次树节点进行合并\n\n\n\n         this.forest[primaryRoot] = this.forest[secondarRoot];\n\n\n\n      } else if (this.rank[primaryRoot] > this.rank[secondarRoot]) {\n\n\n\n         // 次树节点上往主树节点进行合并\n\n\n\n         this.forest[secondarRoot] = this.forest[primaryRoot];\n\n\n\n      } else {\n\n\n\n         // rank[primaryRoot] == rank[secondarRoot]\n\n\n\n         // 如果元素个数一样的根节点，那谁指向谁都无所谓\n\n\n\n         // 本质都是一样的\n\n\n\n \n\n\n\n         // primaryRoot合并到secondarRoot上了，qRoot的高度就会增加1\n\n\n\n         this.forest[primaryRoot] = this.forest[secondarRoot];\n\n\n\n         this.rank[secondarRoot] += 1;\n\n\n\n      }\n\n\n\n   }\n\n\n\n \n\n\n\n   // 功能：查询元素q和元素p这两个数据是否在同一个集合中\n\n\n\n   // 时间复杂度：O(h) h 为树的高度\n\n\n\n   isConnected(treeQ, treeP) {\n\n\n\n      return this.find(treeQ) === this.find(treeP);\n\n\n\n   }\n\n\n\n \n\n\n\n   // 查找元素所对应的集合编号\n\n\n\n   find(id) {\n\n\n\n      if (id < 0 || id >= this.forest.length)\n\n\n\n         throw new Error('index is out of bound.');\n\n\n\n \n\n\n\n      // 不断的去查查找当前节点的根节点\n\n\n\n      // 根节点的索引是指向自己，如果根节点为 1 那么对应的索引也为 1。\n\n\n\n      while (id !== this.forest[id]) id = this.forest[id];\n\n\n\n \n\n\n\n      return id;\n\n\n\n   }\n\n\n\n \n\n\n\n   // 功能：当前并查集一共考虑多少个元素\n\n\n\n   getSize() {\n\n\n\n      return this.forest.length;\n\n\n\n   }\n\n\n\n}\n\n\n\n复制代码\n")])])])]),n._v(" "),e("li",[e("p",[n._v("PerformanceTest")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 性能测试\n\n\n\nclass PerformanceTest {\n\n\n\n   constructor() {}\n\n\n\n \n\n\n\n   // 对比队列\n\n\n\n   testQueue(queue, openCount) {\n\n\n\n      let startTime = Date.now();\n\n\n\n \n\n\n\n      let random = Math.random;\n\n\n\n      for (var i = 0; i < openCount; i++) {\n\n\n\n         queue.enqueue(random() * openCount);\n\n\n\n      }\n\n\n\n \n\n\n\n      while (!queue.isEmpty()) {\n\n\n\n         queue.dequeue();\n\n\n\n      }\n\n\n\n \n\n\n\n      let endTime = Date.now();\n\n\n\n \n\n\n\n      return this.calcTime(endTime - startTime);\n\n\n\n   }\n\n\n\n \n\n\n\n   // 对比栈\n\n\n\n   testStack(stack, openCount) {\n\n\n\n      let startTime = Date.now();\n\n\n\n \n\n\n\n      let random = Math.random;\n\n\n\n      for (var i = 0; i < openCount; i++) {\n\n\n\n         stack.push(random() * openCount);\n\n\n\n      }\n\n\n\n \n\n\n\n      while (!stack.isEmpty()) {\n\n\n\n         stack.pop();\n\n\n\n      }\n\n\n\n \n\n\n\n      let endTime = Date.now();\n\n\n\n \n\n\n\n      return this.calcTime(endTime - startTime);\n\n\n\n   }\n\n\n\n \n\n\n\n   // 对比集合\n\n\n\n   testSet(set, openCount) {\n\n\n\n      let startTime = Date.now();\n\n\n\n \n\n\n\n      let random = Math.random;\n\n\n\n      let arr = [];\n\n\n\n      let temp = null;\n\n\n\n \n\n\n\n      // 第一遍测试\n\n\n\n      for (var i = 0; i < openCount; i++) {\n\n\n\n         temp = random();\n\n\n\n         // 添加重复元素，从而测试集合去重的能力\n\n\n\n         set.add(temp * openCount);\n\n\n\n         set.add(temp * openCount);\n\n\n\n \n\n\n\n         arr.push(temp * openCount);\n\n\n\n      }\n\n\n\n \n\n\n\n      for (var i = 0; i < openCount; i++) {\n\n\n\n         set.remove(arr[i]);\n\n\n\n      }\n\n\n\n \n\n\n\n      // 第二遍测试\n\n\n\n      for (var i = 0; i < openCount; i++) {\n\n\n\n         set.add(arr[i]);\n\n\n\n         set.add(arr[i]);\n\n\n\n      }\n\n\n\n \n\n\n\n      while (!set.isEmpty()) {\n\n\n\n         set.remove(arr[set.getSize() - 1]);\n\n\n\n      }\n\n\n\n \n\n\n\n      let endTime = Date.now();\n\n\n\n \n\n\n\n      // 求出两次测试的平均时间\n\n\n\n      let avgTime = Math.ceil((endTime - startTime) / 2);\n\n\n\n \n\n\n\n      return this.calcTime(avgTime);\n\n\n\n   }\n\n\n\n \n\n\n\n   // 对比映射\n\n\n\n   testMap(map, openCount) {\n\n\n\n      let startTime = Date.now();\n\n\n\n \n\n\n\n      let array = new MyArray();\n\n\n\n      let random = Math.random;\n\n\n\n      let temp = null;\n\n\n\n      let result = null;\n\n\n\n      for (var i = 0; i < openCount; i++) {\n\n\n\n         temp = random();\n\n\n\n         result = openCount * temp;\n\n\n\n         array.add(result);\n\n\n\n         array.add(result);\n\n\n\n         array.add(result);\n\n\n\n         array.add(result);\n\n\n\n      }\n\n\n\n \n\n\n\n      for (var i = 0; i < array.getSize(); i++) {\n\n\n\n         result = array.get(i);\n\n\n\n         if (map.contains(result)) map.add(result, map.get(result) + 1);\n\n\n\n         else map.add(result, 1);\n\n\n\n      }\n\n\n\n \n\n\n\n      for (var i = 0; i < array.getSize(); i++) {\n\n\n\n         result = array.get(i);\n\n\n\n         map.remove(result);\n\n\n\n      }\n\n\n\n \n\n\n\n      let endTime = Date.now();\n\n\n\n \n\n\n\n      return this.calcTime(endTime - startTime);\n\n\n\n   }\n\n\n\n \n\n\n\n   // 对比堆 主要对比 使用heapify 与 不使用heapify时的性能\n\n\n\n   testHeap(heap, array, isHeapify) {\n\n\n\n      const startTime = Date.now();\n\n\n\n \n\n\n\n      // 是否支持 heapify\n\n\n\n      if (isHeapify) heap.heapify(array);\n\n\n\n      else {\n\n\n\n         for (const element of array) heap.add(element);\n\n\n\n      }\n\n\n\n \n\n\n\n      console.log('heap size:' + heap.size() + '\\r\\n');\n\n\n\n      document.body.innerHTML += 'heap size:' + heap.size() + '<br /><br />';\n\n\n\n \n\n\n\n      // 使用数组取值\n\n\n\n      let arr = new Array(heap.size());\n\n\n\n      for (let i = 0; i < arr.length; i++) arr[i] = heap.extractMax();\n\n\n\n \n\n\n\n      console.log(\n\n\n\n         'Array size:' + arr.length + '，heap size:' + heap.size() + '\\r\\n'\n\n\n\n      );\n\n\n\n      document.body.innerHTML +=\n\n\n\n         'Array size:' +\n\n\n\n         arr.length +\n\n\n\n         '，heap size:' +\n\n\n\n         heap.size() +\n\n\n\n         '<br /><br />';\n\n\n\n \n\n\n\n      // 检验一下是否符合要求\n\n\n\n      for (let i = 1; i < arr.length; i++)\n\n\n\n         if (arr[i - 1] < arr[i]) throw new Error('error.');\n\n\n\n \n\n\n\n      console.log('test heap completed.' + '\\r\\n');\n\n\n\n      document.body.innerHTML += 'test heap completed.' + '<br /><br />';\n\n\n\n \n\n\n\n      const endTime = Date.now();\n\n\n\n      return this.calcTime(endTime - startTime);\n\n\n\n   }\n\n\n\n \n\n\n\n   // 对比并查集\n\n\n\n   testUnionFind(unionFind, openCount, primaryArray, secondaryArray) {\n\n\n\n      const size = unionFind.getSize();\n\n\n\n      const random = Math.random;\n\n\n\n \n\n\n\n      return this.testCustomFn(function() {\n\n\n\n         // 合并操作\n\n\n\n         for (var i = 0; i < openCount; i++) {\n\n\n\n            let primaryId = primaryArray[i];\n\n\n\n            let secondaryId = secondaryArray[i];\n\n\n\n \n\n\n\n            unionFind.unionElements(primaryId, secondaryId);\n\n\n\n         }\n\n\n\n \n\n\n\n         // 查询连接操作\n\n\n\n         for (var i = 0; i < openCount; i++) {\n\n\n\n            let primaryRandomId = Math.floor(random() * size);\n\n\n\n            let secondaryRandomId = Math.floor(random() * size);\n\n\n\n \n\n\n\n            unionFind.unionElements(primaryRandomId, secondaryRandomId);\n\n\n\n         }\n\n\n\n      });\n\n\n\n   }\n\n\n\n \n\n\n\n   // 计算运行的时间，转换为 天-小时-分钟-秒-毫秒\n\n\n\n   calcTime(result) {\n\n\n\n      //获取距离的天数\n\n\n\n      var day = Math.floor(result / (24 * 60 * 60 * 1000));\n\n\n\n \n\n\n\n      //获取距离的小时数\n\n\n\n      var hours = Math.floor((result / (60 * 60 * 1000)) % 24);\n\n\n\n \n\n\n\n      //获取距离的分钟数\n\n\n\n      var minutes = Math.floor((result / (60 * 1000)) % 60);\n\n\n\n \n\n\n\n      //获取距离的秒数\n\n\n\n      var seconds = Math.floor((result / 1000) % 60);\n\n\n\n \n\n\n\n      //获取距离的毫秒数\n\n\n\n      var milliSeconds = Math.floor(result % 1000);\n\n\n\n \n\n\n\n      // 计算时间\n\n\n\n      day = day < 10 ? '0' + day : day;\n\n\n\n      hours = hours < 10 ? '0' + hours : hours;\n\n\n\n      minutes = minutes < 10 ? '0' + minutes : minutes;\n\n\n\n      seconds = seconds < 10 ? '0' + seconds : seconds;\n\n\n\n      milliSeconds =\n\n\n\n         milliSeconds < 100\n\n\n\n            ? milliSeconds < 10\n\n\n\n               ? '00' + milliSeconds\n\n\n\n               : '0' + milliSeconds\n\n\n\n            : milliSeconds;\n\n\n\n \n\n\n\n      // 输出耗时字符串\n\n\n\n      result =\n\n\n\n         day +\n\n\n\n         '天' +\n\n\n\n         hours +\n\n\n\n         '小时' +\n\n\n\n         minutes +\n\n\n\n         '分' +\n\n\n\n         seconds +\n\n\n\n         '秒' +\n\n\n\n         milliSeconds +\n\n\n\n         '毫秒' +\n\n\n\n         '  <<<<============>>>>  总毫秒数：' +\n\n\n\n         result;\n\n\n\n \n\n\n\n      return result;\n\n\n\n   }\n\n\n\n \n\n\n\n   // 自定义对比\n\n\n\n   testCustomFn(fn) {\n\n\n\n      let startTime = Date.now();\n\n\n\n \n\n\n\n      fn();\n\n\n\n \n\n\n\n      let endTime = Date.now();\n\n\n\n \n\n\n\n      return this.calcTime(endTime - startTime);\n\n\n\n   }\n\n\n\n}\n\n\n\n复制代码\n")])])])]),n._v(" "),e("li",[e("p",[n._v("Main")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// main 函数\n\n\n\nclass Main {\n\n\n\n   constructor() {\n\n\n\n      this.alterLine('UnionFind Comparison Area');\n\n\n\n      // 千万级别\n\n\n\n      const size = 10000000; // 并查集维护节点数\n\n\n\n      const openCount = 10000000; // 操作数\n\n\n\n \n\n\n\n      // 生成同一份测试数据的辅助代码\n\n\n\n      const random = Math.random;\n\n\n\n      const primaryArray = new Array(openCount);\n\n\n\n      const secondaryArray = new Array(openCount);\n\n\n\n \n\n\n\n      // 生成同一份测试数据\n\n\n\n      for (var i = 0; i < openCount; i++) {\n\n\n\n         primaryArray[i] = Math.floor(random() * size);\n\n\n\n         secondaryArray[i] = Math.floor(random() * size);\n\n\n\n      }\n\n\n\n \n\n\n\n      // 开始测试\n\n\n\n      const myUnionFindThree = new MyUnionFindThree(size);\n\n\n\n      const myUnionFindFour = new MyUnionFindFour(size);\n\n\n\n      const performanceTest = new PerformanceTest();\n\n\n\n \n\n\n\n      // 测试后获取测试信息\n\n\n\n      const myUnionFindThreeInfo = performanceTest.testUnionFind(\n\n\n\n         myUnionFindThree,\n\n\n\n         openCount,\n\n\n\n         primaryArray,\n\n\n\n         secondaryArray\n\n\n\n      );\n\n\n\n      const myUnionFindFourInfo = performanceTest.testUnionFind(\n\n\n\n         myUnionFindFour,\n\n\n\n         openCount,\n\n\n\n         primaryArray,\n\n\n\n         secondaryArray\n\n\n\n      );\n\n\n\n \n\n\n\n      // 总毫秒数：8042\n\n\n\n      console.log(\n\n\n\n         'MyUnionFindThree time：' + myUnionFindThreeInfo,\n\n\n\n         myUnionFindThree\n\n\n\n      );\n\n\n\n      this.show('MyUnionFindThree time：' + myUnionFindThreeInfo);\n\n\n\n      // 总毫秒数：7463\n\n\n\n      console.log(\n\n\n\n         'MyUnionFindFour time：' + myUnionFindFourInfo,\n\n\n\n         myUnionFindFour\n\n\n\n      );\n\n\n\n      this.show('MyUnionFindFour time：' + myUnionFindFourInfo);\n\n\n\n   }\n\n\n\n \n\n\n\n   // 将内容显示在页面上\n\n\n\n   show(content) {\n\n\n\n      document.body.innerHTML += `${content}<br /><br />`;\n\n\n\n   }\n\n\n\n \n\n\n\n   // 展示分割线\n\n\n\n   alterLine(title) {\n\n\n\n      let line = `--------------------${title}----------------------`;\n\n\n\n      console.log(line);\n\n\n\n      document.body.innerHTML += `${line}<br /><br />`;\n\n\n\n   }\n\n\n\n}\n\n\n\n \n\n\n\n// 页面加载完毕\n\n\n\nwindow.onload = function() {\n\n\n\n   // 执行主函数\n\n\n\n   new Main();\n\n\n\n};\n\n\n\n复制代码\n")])])])])]),n._v(" "),e("p",[n._v("相关资源："),e("a",{attrs:{href:"https://download.csdn.net/download/zlhy_/4890518?spm=1001.2101.3001.5697",target:"_blank",rel:"noopener noreferrer"}},[n._v("并"),e("em",[n._v("查集")]),n._v("以及各种操作"),e("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);