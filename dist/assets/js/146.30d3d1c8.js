(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{654:function(e,t,r){"use strict";r.r(t);var o=r(6),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"_5-set"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-set"}},[e._v("#")]),e._v(" 5. Set")]),e._v(" "),r("ol",[r("li",[r("strong",[r("code",[e._v("Set")])]),e._v(" 对象允许你存储任何类型的唯一值，无论是"),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive",target:"_blank",rel:"noopener noreferrer"}},[e._v("原始值"),r("OutboundLink")],1),e._v("或者是对象引用。"),r("code",[e._v("Set")]),e._v("对象是值的集合，你可以按照插入的顺序迭代它的元素。 Set中的元素只会"),r("strong",[e._v("出现一次")]),e._v("，即 Set 中的元素是唯一的。")])]),e._v(" "),r("blockquote",[r("p",[e._v("值的相等")])]),e._v(" "),r("p",[e._v("因为 Set 中的值总是唯一的，所以需要判断两个值是否相等。在ECMAScript规范的早期版本中，这不是基于和===操作符中使用的算法相同的算法。具体来说，对于 Set s， +0 （+0 严格相等于-0）和-0是不同的值。然而，在 ECMAScript 2015规范中这点已被更改。有关详细信息，请参阅"),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7",target:"_blank",rel:"noopener noreferrer"}},[e._v("浏览器兼容性"),r("OutboundLink")],1),e._v(" 表中的“"),r("em",[e._v("Key equality for -0 and 0")]),e._v("”。")]),e._v(" "),r("p",[e._v("另外，"),r("code",[e._v("NaN")]),e._v("和"),r("code",[e._v("undefined")]),e._v("都可以被存储在Set 中， "),r("code",[e._v("NaN")]),e._v("之间被视为相同的值（NaN被认为是相同的，尽管 NaN !== NaN）。")])])}),[],!1,null,null,null);t.default=a.exports}}]);