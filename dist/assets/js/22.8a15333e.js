(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{307:function(e,r,t){"use strict";function s(e,r,t,s,a,o,n,i){var c,_="function"==typeof e?e.options:e;if(r&&(_.render=r,_.staticRenderFns=t,_._compiled=!0),s&&(_.functional=!0),o&&(_._scopeId="data-v-"+o),n?(c=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),a&&a.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(n)},_._ssrRegister=c):a&&(c=i?function(){a.call(this,(_.functional?this.parent:this).$root.$options.shadowRoot)}:a),c)if(_.functional){_._injectStyles=c;var v=_.render;_.render=function(e,r){return c.call(r),v(e,r)}}else{var p=_.beforeCreate;_.beforeCreate=p?[].concat(p,c):[c]}return{exports:e,options:_}}t.d(r,"a",(function(){return s}))},396:function(e,r,t){"use strict";t.r(r);var s=t(307),a=Object(s.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"浏览器多进程架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器多进程架构"}},[e._v("#")]),e._v(" 浏览器多进程架构")]),e._v(" "),t("p",[e._v("我们可以简单的认为 JavaScript 这门语言目前有两个主要的 runtime，一个是 Node.js，另一个就是浏览器环境。我们平常所谓的 JavaScript 是单线程的，实际上指的是 JavaScript 运行在 Render process 的 Main thread，什么是 Render process，看完你就明白了。")]),e._v(" "),t("h2",{attrs:{id:"背景知识-进程与线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#背景知识-进程与线程"}},[e._v("#")]),e._v(" 背景知识 - 进程与线程")]),e._v(" "),t("p",[e._v("先来扯一些背景知识，什么是进程，什么是线程（JavaScript 其实还有个协程的概念，不扯），这个对我们后面的讲解很重要。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/BrowserModel/BrowserArch/BrowserArchFirst.assets/v2-61a0f6f7d721ebe70197995116d31499_720w.jpg",alt:"img"}})]),e._v(" "),t("ul",[t("li",[e._v("A process can be described as an application’s executing program.")]),e._v(" "),t("li",[e._v("A thread is the one that lives inside of process and executes any part of its process's program.")]),e._v(" "),t("li",[e._v("多个线程之间共享内存，多个进程之间不共享内存，需要通过 IPC 传递信息")])]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/BrowserModel/BrowserArch/BrowserArchFirst.assets/v2-31c508ea3beb939f681f8257ce0e3a7b_720w.jpg",alt:"img"}})]),e._v(" "),t("h3",{attrs:{id:"单线程与多线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单线程与多线程"}},[e._v("#")]),e._v(" 单线程与多线程")]),e._v(" "),t("p",[e._v("比如下面的代码，理论上来说通过多线程处理要比单线程要快，原因是因为多线程允许并行处理")]),e._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("+")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("20")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("7")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("*")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nconsole"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),t("p",[t("img",{attrs:{src:"/images/BrowserModel/BrowserArch/BrowserArchFirst.assets/v2-62e20195195189bca138d21b16c6bea7_720w.jpg",alt:"img"}})]),e._v(" "),t("p",[e._v("下图展示同一个进程的内存是如何共享的")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/BrowserModel/BrowserArch/BrowserArchFirst.assets/v2-d3b72af641e80551c3c549777f9c5fa3_720w.jpg",alt:"img"}})]),e._v(" "),t("h2",{attrs:{id:"本文重点-多进程浏览器架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本文重点-多进程浏览器架构"}},[e._v("#")]),e._v(" 本文重点 - 多进程浏览器架构")]),e._v(" "),t("p",[e._v("不扯以前的旧的浏览器架构，Chrome 浏览器的架构如下图所示（不一定最新）。"),t("strong",[e._v("需要注意的是，像 UI process, Network process 等等这些进程都有可能会被“降级”为 Browser process 的线程（UI thread, Network thread）")]),e._v("。")]),e._v(" "),t("blockquote",[t("p",[e._v("When Chrome is running on powerful hardware, it may split each service into different processes giving more stability, but if it is on a resource-constraint device, Chrome consolidates services into one process saving memory footprint.")])]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/BrowserModel/BrowserArch/BrowserArchFirst.assets/v2-74bd7668de8f98f47b302de8d9500048_720w.jpg",alt:"img"}})]),e._v(" "),t("p",[e._v("所以当你仅仅打开一个 tab 页的时候的进程信息可能是这样的")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/BrowserModel/BrowserArch/BrowserArchFirst.assets/v2-11d255e0026081f2f26f3b65f85f6ae0_720w.jpg",alt:"img"}})]),e._v(" "),t("h3",{attrs:{id:"进程介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进程介绍"}},[e._v("#")]),e._v(" 进程介绍")]),e._v(" "),t("h3",{attrs:{id:"_1-插件进程-plugin-process"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-插件进程-plugin-process"}},[e._v("#")]),e._v(" 1. 插件进程（Plugin process)")]),e._v(" "),t("p",[e._v("就是插件运行的进程，每个插件一个进程，单独隔离出是为了防止插件挂了影响用户")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/BrowserModel/BrowserArch/BrowserArchFirst.assets/v2-049b2bcb4dfab229f68f30f0291f4a12_720w.jpg",alt:"img"}})]),e._v(" "),t("h3",{attrs:{id:"_2-gpu-进程-gpu-process"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-gpu-进程-gpu-process"}},[e._v("#")]),e._v(" 2. GPU 进程（GPU process）")]),e._v(" "),t("p",[e._v("主要负责 UI 渲染")]),e._v(" "),t("blockquote",[t("p",[e._v("Handles GPU tasks in isolation from other processes. It is separated into different process because GPUs handles requests from multiple apps and draw them in the same surface.")])]),e._v(" "),t("h3",{attrs:{id:"_3-网络进程-network-process"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-网络进程-network-process"}},[e._v("#")]),e._v(" 3. 网络进程（Network process）")]),e._v(" "),t("p",[e._v("负责网络资源加载")]),e._v(" "),t("h3",{attrs:{id:"_4-浏览器主进程-browser-process"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-浏览器主进程-browser-process"}},[e._v("#")]),e._v(" 4. 浏览器主进程（Browser process）")]),e._v(" "),t("p",[e._v("负责界面展示，用户交互，子进程管理，文件存取等")]),e._v(" "),t("h3",{attrs:{id:"_5-渲染进程-renderer-process"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-渲染进程-renderer-process"}},[e._v("#")]),e._v(" 5. 渲染进程 (Renderer process）")]),e._v(" "),t("p",[e._v("Controls anything inside of the tab where a website is displayed.")]),e._v(" "),t("p",[e._v("主要负责将 HTML, CSS, JavaScript 转换为用户可交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 就运行在渲染进程，默认每个 tab 一个渲染进程（特殊情况下面的进程模式会讲）")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/BrowserModel/BrowserArch/BrowserArchFirst.assets/v2-12dcfec1e4e079c89be0c5fd086c53e5_720w.jpg",alt:"img"}})]),e._v(" "),t("h2",{attrs:{id:"chromium-四种进程模式-chromium-process-models"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chromium-四种进程模式-chromium-process-models"}},[e._v("#")]),e._v(" Chromium 四种进程模式 (Chromium Process Models)")]),e._v(" "),t("blockquote",[t("p",[e._v("Ref: "),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//www.chromium.org/developers/design-documents/process-models",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.chromium.org/developers/design-documents/process-models"),t("OutboundLink")],1)])]),e._v(" "),t("p",[e._v("Chromium 提供了四种进程模式，不同的进程模式会对 tab 进程做不同的处理，比如采用某个模式况会给 tab 分配新进程，而采用另外一个模式则不会，下面是四种模式的介绍，Chrome 默认采用第一个模式")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("Process-per-site-instance")]),e._v(" (default) - 同一个 "),t("strong",[e._v("site-instance")]),e._v(" 使用一个进程")]),e._v(" "),t("li",[t("strong",[e._v("Process-per-site -")]),e._v(" 同一个 "),t("strong",[e._v("site")]),e._v(" 使用一个进程")]),e._v(" "),t("li",[t("strong",[e._v("Process-per-tab -")]),e._v(" 每个 tab 使用一个进程")]),e._v(" "),t("li",[t("strong",[e._v("Single process -")]),e._v(" 所有 tab 共用一个进程")])]),e._v(" "),t("p",[e._v("这里需要给出 site 和 site-instance 的定义")]),e._v(" "),t("ul",[t("li",[t("p",[t("strong",[e._v("site")]),e._v(" 指的是相同的 registered domain name (e.g., "),t("a",{attrs:{href:"https://link.zhihu.com/?target=http%3A//google.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://google.com"),t("OutboundLink")],1),e._v(" or "),t("a",{attrs:{href:"https://link.zhihu.com/?target=http%3A//bbc.co.uk",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://bbc.co.uk"),t("OutboundLink")],1),e._v(") 和 scheme (e.g., https://) 。比如 "),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//z.baidu.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://z.baidu.com"),t("OutboundLink")],1),e._v(" 和 "),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//b.baidu.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://b.baidu.com"),t("OutboundLink")],1),e._v(" 就可以理解为同一个 site（注意这里要和 "),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy",target:"_blank",rel:"noopener noreferrer"}},[e._v("Same-origin policy"),t("OutboundLink")],1),e._v(" 区分开来，同源策略还涉及到子域名和端口）")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("site-instance")]),e._v(" 指的是一组 "),t("strong",[e._v("connected pages from the same site")]),e._v("，这里 "),t("strong",[e._v("connected")]),e._v(" 的定义是 "),t("strong",[e._v("can obtain references to each other in script code")]),e._v(" 怎么理解这段话呢。满足下面两中情况并且打开的新页面和旧页面属于上面定义的同一个 site，就属于同一个 "),t("strong",[e._v("site-instance")])])]),e._v(" "),t("li",[t("ul",[t("li",[e._v("用户通过 "),t("code",[e._v('<a target="_blank">')]),e._v(" 这种方式点击打开的新页面")]),e._v(" "),t("li",[e._v("JavaScript code 打开的新页面（比如 "),t("code",[e._v("window.open")]),e._v(")")])])])]),e._v(" "),t("p",[e._v("理解了这两个关键字就可以仔细说下上面的四种进程模式")]),e._v(" "),t("p",[t("strong",[e._v("Single process")]),e._v(" 和 "),t("strong",[e._v("Process-per-tab")]),e._v(" 就不用说了，意如其名。 如果使用 "),t("strong",[e._v("Process-per-site")]),e._v(" 模式，当你打开了一个 tab 访问 "),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//a.baidu.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://a.baidu.com"),t("OutboundLink")],1),e._v("，然后再打开一个 tab 访问 "),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//b.baidu.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://b.baidu.com"),t("OutboundLink")],1),e._v("，这两个 tab 其实用的是同一个进程，因为这两个 tab 被分在同一个 group。这就意味着，你在其中一个 tab 写一个死循环，这两个 tab 都会 hang")]),e._v(" "),t("p",[t("strong",[e._v("Process-per-site-instance")]),e._v(" 是最重要的，因为这个是 Chrome 默认使用的模式，也就是几乎所有的用户都在用的模式。当你打开一个 tab 访问 "),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//a.baidu.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://a.baidu.com"),t("OutboundLink")],1),e._v("，然后再打开一个 tab 访问 "),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//b.baidu.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://b.baidu.com"),t("OutboundLink")],1),e._v("，这两个 tab 会使用"),t("strong",[e._v("两个进程")]),e._v("。如果 "),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//b.baidu.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://b.baidu.com"),t("OutboundLink")],1),e._v(" 是通过 "),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//a.baidu.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://a.baidu.com"),t("OutboundLink")],1),e._v(" 页面的 JavaScript 代码打开的，这两个 tab 会使用"),t("strong",[e._v("同一个进程")]),e._v("，比如下图的例子，可以看到两个 tab 的 processId 是相同的")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/BrowserModel/BrowserArch/BrowserArchFirst.assets/v2-c7923c5f307addf0176c5cc9ce2305d1_720w.jpg",alt:"img"}})]),e._v(" "),t("h2",{attrs:{id:"为什么使用-process-per-site-instance-这种进程模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用-process-per-site-instance-这种进程模式"}},[e._v("#")]),e._v(" 为什么使用 Process-per-site-instance 这种进程模式")]),e._v(" "),t("p",[e._v("因为这种模型兼顾了性能与易用性，是一个比较中庸通用的模式")]),e._v(" "),t("ul",[t("li",[e._v("相较于 Process-per-tab，能够少开很多进程，就意味着更少的内存占用")]),e._v(" "),t("li",[e._v("相较于 Process-per-site，能够更好的隔离相同域名下毫无关联的 tab，更加安全")])]),e._v(" "),t("p",[e._v("同时这么做也满足了 different subdomains or ports of a site to access each other via Javascript 这种需求。")]),e._v(" "),t("p",[e._v("我们一开始的时候说过，同一个进程的多个线程是共享内存的。所以当两个 tab 使用同一个进程的时候，这两个 tab 就是“通的”。比如 A 页面使用 JavaScript 打开 B 页面，那么 B 页面可以通过 "),t("code",[e._v("window.opener")]),e._v(" 访问 A 页面的 "),t("code",[e._v("window")]),e._v(" 对象。")]),e._v(" "),t("h2",{attrs:{id:"多进程如何协作完成任务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多进程如何协作完成任务"}},[e._v("#")]),e._v(" 多进程如何协作完成任务")]),e._v(" "),t("h3",{attrs:{id:"从输入-url-到页面展示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从输入-url-到页面展示"}},[e._v("#")]),e._v(" - 从输入 URL 到页面展示")]),e._v(" "),t("p",[e._v("这个问题大概是面试出现概率最高的题目之一了，这整个流程其实有个名字叫 "),t("strong",[e._v("Navigation")]),e._v("，我们从进程线程的角度来梳理一下。")]),e._v(" "),t("h3",{attrs:{id:"ui-和网络"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ui-和网络"}},[e._v("#")]),e._v(" UI 和网络")]),e._v(" "),t("p",[e._v("首先，在输入框输入 "),t("code",[e._v("www.mysite.com")]),e._v(" 然后输入 "),t("code",[e._v("Enter")]),e._v(" 这些都是由浏览器进程的 UI thread 来负责处理的，其中还有个额外的处理就是判断输入是一个 URL 还是个 Query，无论是哪个都要通过 IPC 通知网络进程发送请求，只不过请求的目标不一样（输入的 URL / 搜索引擎）。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/BrowserModel/BrowserArch/BrowserArchFirst.assets/v2-9a36065b0afc54cc859c0d8e8f7e1713_720w.jpg",alt:"img"}})]),e._v(" "),t("p",[e._v("通知网络进程后，UI thread 展示 Spinner，Network process 会负责后续网络相关的处理比如 DNS lookup 和 establishing TLS Connection。Network process 有可能会收到 redirect response 比如 HTTP 301，这种情况 Network 会通知 UI thread 对输入框的 URL 做修改。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/BrowserModel/BrowserArch/BrowserArchFirst.assets/v2-fbb02b92ff64443b6982c66cc5dd6ee1_720w.jpg",alt:"img"}})]),e._v(" "),t("h3",{attrs:{id:"解析返回数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解析返回数据"}},[e._v("#")]),e._v(" 解析返回数据")]),e._v(" "),t("p",[e._v("网络进程会根据 Content-Type(HTTP Header) 和文件的 MIME type 来对不同的返回做不同的处理。比如，如果是 HTML 会交给 Renderer process, 如果是 zip 会交给 Download manager。")]),e._v(" "),t("p",[e._v("同时这里会做一些安全检查，比如 "),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//safebrowsing.google.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("SafeBrowsing"),t("OutboundLink")],1),e._v(" 和 "),t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//www.chromium.org/Home/chromium-security/corb-for-developers",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cross Origin Read Blocking (CORB)"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/BrowserModel/BrowserArch/BrowserArchFirst.assets/v2-62b5c2036b641126b7a3b66d53c45966_720w.jpg",alt:"img"}})]),e._v(" "),t("h3",{attrs:{id:"提交导航"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提交导航"}},[e._v("#")]),e._v(" 提交导航")]),e._v(" "),t("p",[e._v("Network process 完成解析文件类型和安全检查后，会通知 Browser process，然后 browser process 通过 IPC 通知指定的渲染进程"),t("strong",[e._v("提交导航（commit the navigation）")]),e._v("，同时将网络进程的 data stream 传给渲染进程 so the renderer process can keep receiving HTML data。渲染进程在开始接收 HTML 后，会返回"),t("strong",[e._v("确认信息（confirm message）")]),e._v("，然后浏览器进程这边就会对 UI 做一些修改，比如 HTTPS 的小锁头，前进后退按钮等等")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/BrowserModel/BrowserArch/BrowserArchFirst.assets/v2-0326147f061af8a13fafbf3aa01b4746_720w.jpg",alt:"img"}})]),e._v(" "),t("h3",{attrs:{id:"渲染进程内部"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染进程内部"}},[e._v("#")]),e._v(" 渲染进程内部")]),e._v(" "),t("p",[e._v("就像上面说的，Renderer process 收到 commit navigation 的信息后会返回 confirm message 给浏览器主进程，同时接收 HTML 并渲染的过程就开始了，具体细节不讲太复杂，我们只关心进程间通讯。渲染进程结束后并且所有 onload 事件触发后，会发送 IPC 给浏览器进程，然后 tab 页的 spinner 会停止，页面加载完成。")]),e._v(" "),t("p",[t("img",{attrs:{src:"/images/BrowserModel/BrowserArch/BrowserArchFirst.assets/v2-862e209e5e284cdb2ad3f73c031524cd_720w.jpg",alt:"img"}})]),e._v(" "),t("h2",{attrs:{id:"ref"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ref"}},[e._v("#")]),e._v(" Ref")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//www.chromium.org/developers/design-documents",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://www.chromium.org/developers/design-documents"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developers.google.com/web/updates/2018/09/inside-browser-part1",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://developers.google.com/web/updates/2018/09/inside-browser-part1"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//developers.google.com/web/updates/2018/09/inside-browser-part2",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://developers.google.com/web/updates/2018/09/inside-browser-part2"),t("OutboundLink")],1)])]),e._v(" "),t("p",[t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/102128787",target:"_blank",rel:"noopener noreferrer"}},[e._v("浏览器多进程架构"),t("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=a.exports}}]);