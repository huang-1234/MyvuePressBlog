(window.webpackJsonp=window.webpackJsonp||[]).push([[226],{736:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_1-estype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-estype"}},[t._v("#")]),t._v(" 1. esType")]),t._v(" "),a("h2",{attrs:{id:"原始类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原始类型"}},[t._v("#")]),t._v(" 原始类型")]),t._v(" "),a("p",[t._v("在 es6 中，存在着 7 种原始类型：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Boolean")])]),t._v(" "),a("li",[a("code",[t._v("Null")])]),t._v(" "),a("li",[a("code",[t._v("Undefined")])]),t._v(" "),a("li",[a("code",[t._v("Number")])]),t._v(" "),a("li",[a("code",[t._v("String")])]),t._v(" "),a("li",[a("code",[t._v("Symbol")])]),t._v(" "),a("li",[a("code",[t._v("BigInt")])])]),t._v(" "),a("p",[t._v("原始类型存储的是值，没有函数可以调用。")]),t._v(" "),a("p",[t._v("那么有个问题，为什么"),a("code",[t._v("1..toString()")]),t._v("是正确的？而"),a("code",[t._v("1.toString()")]),t._v("却不行了呢？")]),t._v(" "),a("p",[t._v("原因在于数字1后面接的第一个点"),a("code",[t._v(".")]),t._v(",编译器是直接当成数字的一部分，而"),a("code",[t._v("1.")]),t._v("后面再接上一个点"),a("code",[t._v(".")]),t._v("才会被当成数字在调用方法，而这也只是数字的隐藏类"),a("code",[t._v("Number")]),t._v("在调用它原型上的方法，数字本身只是基本类型，没有方法和属性，如果调用就会调用相应隐藏类的方法和属性。")]),t._v(" "),a("blockquote",[a("p",[t._v("引用数据类型: 对象Object（包含普通对象-Object，数组对象-Array，正则对象-RegExp，日期对象-Date，数学函数-Math，函数对象-Function），区分它们最好的方法就是后面将要介绍的``Object.prototype.toString.call(target).slice(8,-1)`")]),t._v(" "),a("p",[t._v("tartget是需要被检测的对象，后面再加一个slice(8,-1)是为了去掉前面的[object ]")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v("\n  person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Andy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" person\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sq'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> ?")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> ?")]),t._v("\n")])])]),a("p",[t._v("结果:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("p1："),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sq'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\np2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Andy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("原因: 在函数传参的时候传递的是对象在堆中的内存地址值，test函数中的实参person是p1对象的内存地址，通过调用person.age = 18确实改变了p1的值，但随后person变成了另一块内存空间的地址，并且在最后将这另外一份内存空间的地址返回，赋给了p2。")])]),t._v(" "),a("h3",{attrs:{id:"对象类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象类型"}},[t._v("#")]),t._v(" 对象类型")]),t._v(" "),a("p",[t._v("对象类型和原始类型不同的是，原始类型存储的是值，对象类型存储的是地址（指针）。")]),t._v(" "),a("p",[t._v("当你创建了一个对象类型的时候，计算机会在内存中帮我们开辟一个空间来存放值，但是我们需要找到这个空间，这个空间会拥有一个地址（指针）。")]),t._v(" "),a("h3",{attrs:{id:"正确判断-null"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正确判断-null"}},[t._v("#")]),t._v(" 正确判断 null")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "[object Null]" ')]),t._v("\n")])])]),a("h3",{attrs:{id:"typeof-vs-instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof-vs-instanceof"}},[t._v("#")]),t._v(" typeof vs instanceof")]),t._v(" "),a("p",[a("code",[t._v("typeof")]),t._v(" 对于原始类型来说，除了 "),a("code",[t._v("null")]),t._v(" 都可以显示正确的类型")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'number'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'string'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'undefined'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'boolean'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'symbol'")]),t._v("\n")])])]),a("p",[a("code",[t._v("typeof")]),t._v(" 对于对象来说，除了函数都会显示 "),a("code",[t._v("object")]),t._v("，所以说 "),a("code",[t._v("typeof")]),t._v(" 并不能准确判断变量到底是什么类型.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'object'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'object'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'function'")]),t._v("\n")])])]),a("p",[t._v("如果我们想判断一个对象的正确类型，这时候可以考虑使用 "),a("code",[t._v("instanceof")]),t._v("，因为内部机制是通过原型链来判断的。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\np1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),t._v("\nstr "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nstr1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("对于原始类型来说，你想直接通过 "),a("code",[t._v("instanceof")]),t._v(" 来判断类型是不行的，当然我们还是有办法让 "),a("code",[t._v("instanceof")]),t._v(" 判断原始类型的")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrimitiveString")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hasInstance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrimitiveString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("h3",{attrs:{id:"类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("js")]),t._v("中，只有三种类型转换")]),t._v(" "),a("ul",[a("li",[t._v("转换为布尔值")]),t._v(" "),a("li",[t._v("转换为数字")]),t._v(" "),a("li",[t._v("转换为字符串")])]),t._v(" "),a("h3",{attrs:{id:"转boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转boolean"}},[t._v("#")]),t._v(" 转Boolean")]),t._v(" "),a("p",[t._v("在条件判断时，除了 "),a("code",[t._v("undefined")]),t._v("， "),a("code",[t._v("null")]),t._v("， "),a("code",[t._v("false")]),t._v("， "),a("code",[t._v("NaN")]),t._v("， "),a("code",[t._v("''")]),t._v("， "),a("code",[t._v("0")]),t._v("， "),a("code",[t._v("-0")]),t._v("，其他所有值都转为 "),a("code",[t._v("true")]),t._v("，包括所有对象。")]),t._v(" "),a("h3",{attrs:{id:"对象转原始类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象转原始类型"}},[t._v("#")]),t._v(" 对象转原始类型")]),t._v(" "),a("p",[t._v("一般非基础类型进行转换时会先调用 valueOf，如果 valueOf 无法返回基本类型值，就会调用 toString")]),t._v(" "),a("p",[t._v("对象在转换类型的时候，会调用内置的 "),a("code",[t._v("[[ToPrimitive]]")]),t._v(" 函数，对于该函数来说，算法逻辑一般来说如下：")]),t._v(" "),a("ul",[a("li",[t._v("先检测该对象中是否存在 "),a("code",[t._v("valueOf")]),t._v(" 方法，如果有并返回了原始类型，那么就使用该值进行强制类型转换；")]),t._v(" "),a("li",[t._v("如果 "),a("code",[t._v("valueOf")]),t._v(" 没有返回原始类型，那么就使用 "),a("code",[t._v("toString")]),t._v(" 方法的返回值；")]),t._v(" "),a("li",[t._v("如果 "),a("code",[t._v("vauleOf")]),t._v(" 和 "),a("code",[t._v("toString")]),t._v(" 两个方法都不返回基本类型值，便会触发一个 "),a("code",[t._v("TypeError")]),t._v(" 的错误。")])]),t._v(" "),a("p",[t._v("也可以重写 "),a("code",[t._v("Symbol.toPrimitive")]),t._v(" ，该方法在转原始类型时调用优先级最高。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toPrimitive"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 3")]),t._v("\n")])])]),a("h3",{attrs:{id:"四则运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四则运算符"}},[t._v("#")]),t._v(" 四则运算符")]),t._v(" "),a("p",[t._v("加法运算符不同于其他几个运算符，它有以下几个特点：")]),t._v(" "),a("ul",[a("li",[t._v("运算中其中一方为字符串，那么就会把另一方也转换为字符串。")]),t._v(" "),a("li",[t._v("如果一方不是字符串或者数字，那么会将它转换为数字或者字符串")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '11'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "41,2,3"')]),t._v("\n")])])]),a("p",[t._v("对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])])]),a("h3",{attrs:{id:"比较运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符"}},[t._v("#")]),t._v(" 比较运算符")]),t._v(" "),a("ul",[a("li",[t._v("如果是对象，就通过 "),a("code",[t._v("toPrimitive")]),t._v(" 转换对象")]),t._v(" "),a("li",[t._v("如果是字符串，就通过 "),a("code",[t._v("unicode")]),t._v(" 字符索引来比较")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("h3",{attrs:{id:"vs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vs"}},[t._v("#")]),t._v(" == VS ===")]),t._v(" "),a("p",[t._v("对于 "),a("code",[t._v("==")]),t._v(" 来说，如果对比双方的类型"),a("strong",[t._v("不一样")]),t._v("的话，就会进行"),a("strong",[t._v("类型转换")]),t._v(".")]),t._v(" "),a("p",[t._v("假如我们需要对比 "),a("code",[t._v("x")]),t._v(" 和 "),a("code",[t._v("y")]),t._v(" 是否相同，就会进行如下判断流程：")]),t._v(" "),a("ol",[a("li",[t._v("首先会判断两者类型是否"),a("strong",[t._v("相同")]),t._v("。相同的话就是比大小了")]),t._v(" "),a("li",[t._v("类型不相同的话，那么就会进行类型转换")]),t._v(" "),a("li",[t._v("会先判断是否在对比 "),a("code",[t._v("null")]),t._v(" 和 "),a("code",[t._v("undefined")]),t._v("，是的话就会返回 "),a("code",[t._v("true")])]),t._v(" "),a("li",[t._v("判断两者类型是否为 "),a("code",[t._v("string")]),t._v(" 和 "),a("code",[t._v("number")]),t._v("，是的话就会将字符串转换为 "),a("code",[t._v("number")])]),t._v(" "),a("li",[t._v("判断其中一方是否为 "),a("code",[t._v("boolean")]),t._v("，是的话就会把 "),a("code",[t._v("boolean")]),t._v(" 转为 "),a("code",[t._v("number")]),t._v(" 再进行判断")]),t._v(" "),a("li",[t._v("判断其中一方是否为 "),a("code",[t._v("object")]),t._v(" 且另一方为 "),a("code",[t._v("string")]),t._v("、"),a("code",[t._v("number")]),t._v(" 或者 "),a("code",[t._v("symbol")]),t._v("，是的话就会把 "),a("code",[t._v("object")]),t._v(" 转为原始类型再进行判断")])]),t._v(" "),a("p",[t._v("对于 "),a("code",[t._v("===")]),t._v(" 来说，就是判断两者类型和值是否相同")]),t._v(" "),a("p",[t._v("[] == ![] 为何是 true？")]),t._v(" "),a("p",[t._v("首先看右边，! 符号会将后面的变量强转为 boolean 值，由于 [] 转换为 boolean 是 true，故右边为 false，然后依照上方的第 5 条，将 false 转换为数字 0。")]),t._v(" "),a("p",[t._v("然后看左边，满足第六条的条件，调用 valueOf，由于空数组调用 valueOf 是转化为 0 ，故返回值是 true。")]),t._v(" "),a("h2",{attrs:{id:"常见"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见"}},[t._v("#")]),t._v(" 常见")]),t._v(" "),a("h3",{attrs:{id:"_0-1-0-2-0-3-嘛-为什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-1-0-2-0-3-嘛-为什么"}},[t._v("#")]),t._v(" 0.1 + 0.2 === 0.3 嘛？为什么？")]),t._v(" "),a("p",[t._v("在两数相加时，会先转换成二进制，0.1 和 0.2 转换成二进制的时候尾数会发生无限循环，然后进行对阶运算，JS 引擎对二进制进行截断，所以造成精度丢失。")]),t._v(" "),a("p",[t._v("所以总结："),a("strong",[t._v("精度丢失可能出现在进制转换和对阶运算中")])]),t._v(" "),a("h3",{attrs:{id:"js-整数是怎么表示的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-整数是怎么表示的"}},[t._v("#")]),t._v(" JS 整数是怎么表示的？")]),t._v(" "),a("p",[t._v("通过 Number 类型来表示，遵循 IEEE754 标准，通过 64 位来表示一个数字，（1 + 11 + 52）（1 位数符 + 11 位阶码 + 52 位尾数），最大安全数字是 Math.pow(2, 53) - 1。（符号位 + 指数位 + 小数部分有效位）")]),t._v(" "),a("h3",{attrs:{id:"symbol-有什么用处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-有什么用处"}},[t._v("#")]),t._v(" "),a("code",[t._v("symbol")]),t._v(" 有什么用处")]),t._v(" "),a("p",[t._v("可以用来表示一个独一无二的变量防止命名冲突。")]),t._v(" "),a("p",[t._v("可以利用 "),a("code",[t._v("symbol")]),t._v(" 不会被常规的方法（除了 "),a("code",[t._v("Object.getOwnPropertySymbols")]),t._v(" 外）遍历到，所以可以用来模拟私有变量。")]),t._v(" "),a("p",[t._v("主要用来提供遍历接口，布置了 "),a("code",[t._v("symbol.iterator")]),t._v(" 的对象才可以使用 "),a("code",[t._v("for···of")]),t._v(" 循环，可以统一处理数据结构。调用之后回返回一个遍历器对象，包含有一个 next 方法，使用 next 方法后有两个返回值 value 和 done 分别表示函数当前执行位置的值和是否遍历完毕。")]),t._v(" "),a("p",[t._v("Symbol.for() 可以在全局访问 symbol。")]),t._v(" "),a("h3",{attrs:{id:"和-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和-的区别"}},[t._v("#")]),t._v(" {} + [] 和 [] + {} 的区别")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "[object Object]"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])])]),a("p",[t._v('看第一个，[] 会强转为 ""，{}强转为字符串为 '),a("code",[t._v('"[object Object]"')]),t._v("。两个字符串相加，得到最终结果。")]),t._v(" "),a("p",[t._v("第二个，编译器会把 {} 当作一个空代码块，可以理解为全局作用域下一个没有用的 {} 符号而已，可以把 "),a("code",[t._v("{} + []")]),t._v(" 当作 "),a("code",[t._v("+ []")]),t._v("，而"),a("code",[t._v("+ []")]),t._v("是强制将"),a("code",[t._v("[]")]),t._v("转换为number ,转换的过程是 "),a("code",[t._v("+ []")]),t._v(" --\x3e "),a("code",[t._v('+""')]),t._v(" --\x3e"),a("code",[t._v("0")]),t._v(" 最终的结果就是0。")]),t._v(" "),a("p",[t._v("但是我们执行"),a("code",[t._v("console.log({}+[])")]),t._v("和"),a("code",[t._v("console.log([]+{})")]),t._v(",结果是一样的，因为{}没有一个语句或者表达式的头部。")]),t._v(" "),a("h3",{attrs:{id:"symbol-类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-类型转换"}},[t._v("#")]),t._v(" Symbol 类型转换")]),t._v(" "),a("ul",[a("li",[t._v("不能被转换为数字")]),t._v(" "),a("li",[t._v("能被转换为布尔值（都是 true）")]),t._v(" "),a("li",[t._v('可以被转换成字符串 "Symbol(cool)"')])]),t._v(" "),a("h3",{attrs:{id:"假值列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#假值列表"}},[t._v("#")]),t._v(" 假值列表")]),t._v(" "),a("ul",[a("li",[t._v("undefined")]),t._v(" "),a("li",[t._v("null")]),t._v(" "),a("li",[t._v("false")]),t._v(" "),a("li",[t._v("+0, -0, NaN")]),t._v(" "),a("li",[t._v('""')])]),t._v(" "),a("h3",{attrs:{id:"nan-以及-typeof-nan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nan-以及-typeof-nan"}},[t._v("#")]),t._v(" NAN 以及 typeof NAN")]),t._v(" "),a("p",[t._v("NaN 指的是 Not a Number，表示非数字，typeof NaN = 'number'")]),t._v(" "),a("h2",{attrs:{id:"js中-和-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js中-和-区别"}},[t._v("#")]),t._v(" js中"),a("code",[t._v("==")]),t._v("和"),a("code",[t._v("===")]),t._v("区别")]),t._v(" "),a("h3",{attrs:{id:"简单概要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单概要"}},[t._v("#")]),t._v(" 简单概要")]),t._v(" "),a("p",[t._v("简单来说： == 代表相同， ===代表严格相同, 为啥这么说呢，")]),t._v(" "),a("p",[t._v("这么理解： 当进行双等号比较时候： 先检查两个操作数数据类型，如果相同， 则进行===比较， 如果不同， 则愿意为你进行一次类型转换， 转换成相同类型后再进行比较， 而===比较时， 如果类型不同，直接就是false.")]),t._v(" "),a("p",[t._v("操作数1 == 操作数2， 操作数1 === 操作数2")]),t._v(" "),a("p",[t._v("比较过程：")]),t._v(" "),a("blockquote",[a("p",[t._v("双等号==：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("（1）如果两个值类型相同，再进行三个等号")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("的比较\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("）如果两个值类型不同，也有可能相等，需根据以下规则进行类型转换在比较：\n   a）如果一个是"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("，一个是"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("，那么相等\n   b）如果一个是字符串，一个是数值，把字符串转换成数值之后再进行比较\n")])])]),a("blockquote",[a("p",[t._v("三等号===:")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("）如果类型不同，就一定不相等\n\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("）如果两个都是数值，并且是同一个值，那么相等；如果其中至少一个是"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v("，那么不相等。\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("（判断一个值是否是NaN，只能使用isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 来判断）\n\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("）如果两个都是字符串，每个位置的字符都一样，那么相等，否则不相等。\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("）如果两个值都是"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("，或是"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("，那么相等\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("）如果两个值都引用同一个对象或是函数，那么相等，否则不相等\n（"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("）如果两个值都是"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("，或是"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v("，那么相等"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),a("h1",{attrs:{id:"判断数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断数据类型"}},[t._v("#")]),t._v(" 判断数据类型")]),t._v(" "),a("p",[t._v("本文将通过下方知识点，来讲解判断 JavaScript 数据类型的 4 种方法：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("typeof()")])]),t._v(" "),a("li",[a("code",[t._v("instanceof()")])]),t._v(" "),a("li",[a("code",[t._v("constructor")])]),t._v(" "),a("li",[a("code",[t._v("Object.prototype.toString.call()")])])]),t._v(" "),a("p",[t._v("不管是面试中，亦或在工作上，会出现这么个场景：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("如何判断某个 JavaScript 字段的数据类型？")])])]),t._v(" "),a("p",[t._v("当然，它还可能是某个知识点的附赠品，例如：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("当你进行深拷贝数据的时候，你是如何判断这个字段是什么类型的？你知道判断数据类型有几种方式么？它们优缺点在哪？")])])]),t._v(" "),a("p",[t._v("那么，本文来讲解下，判断 JavaScript 数据类型的四种方法！")]),t._v(" "),a("h3",{attrs:{id:"三-typeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-typeof"}},[t._v("#")]),t._v(" 三 typeof")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @name typeof示例\n * @description 通过 typeof 检测各个数据类型的返回\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" test "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  testUndefined"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  testNull"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  testBoolean"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  testNumber"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  testBigInt"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BigInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 大于 2 的 53 次方算 BigInt")]),t._v("\n  testString"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  testSymbol"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("testFunction")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  testObject"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    obj"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yes'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  testObjectString"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'String'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  testObjectNumber"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("testUndefined"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("testNull"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// object")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("testBoolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// boolean")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("testNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// number")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("testBigInt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bigint")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("testString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("testSymbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// symbol")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("testFunction"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("testObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// object")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("testObjectString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// object")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("testObjectNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// object")]),t._v("\n")])])]),a("p",[t._v("如上，可以看出，通过 "),a("code",[t._v("typeof")]),t._v("，我们可以判断大多数的类型，但是，它存在缺陷：")]),t._v(" "),a("ol",[a("li",[t._v("判断 "),a("code",[t._v("typeof null")]),t._v("，会得到 "),a("code",[t._v("object")]),t._v("；")]),t._v(" "),a("li",[t._v("判断构造函数 "),a("code",[t._v("typeof new String('String')")]),t._v(" 或者 "),a("code",[t._v("typeof new Number(123)")]),t._v(" 等……，也会得到 "),a("code",[t._v("object")]),t._v("。")])]),t._v(" "),a("p",[t._v("即通过 "),a("code",[t._v("typeof")]),t._v(" 进行数据类型判断会有一定的问题。")]),t._v(" "),a("h3",{attrs:{id:"四-instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-instanceof"}},[t._v("#")]),t._v(" 四 instanceof")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @name instanceof示例1\n * @description 检测字符串类型\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" simpleString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'这是简单的 String'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'这是 New 出来的 String'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("simpleString "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false，检查原型链会返回 undefined")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newString "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @name instanceof示例2\n * @description 检测数字类型\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" simpleNumber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newNumber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("simpleNumber "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newNumber "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @name instanceof示例3\n * @description 检测对象类型\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" simpleOjbect "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newObject "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("simpleOjbect "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newObject "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("如上，"),a("code",[t._v("instanceof")]),t._v(" 可能表现的差强人意，虽然它是可以检测数据类型，但是对于 "),a("code",[t._v("'' instanceof String")]),t._v(" 以及 "),a("code",[t._v("123 instanceof Number")]),t._v(" 等会返回 "),a("code",[t._v("false")]),t._v("，不太满足我们需求。")]),t._v(" "),a("p",[t._v("其实 "),a("code",[t._v("instanceof")]),t._v(" 主要用于检测构造函数的 "),a("code",[t._v("prototype")]),t._v(" 属性是否出现在某个实例对象的原型链上，这块知识点到时候我们可以进一步进行学习探索。（一件值得期待的事）")]),t._v(" "),a("h3",{attrs:{id:"五-constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五-constructor"}},[t._v("#")]),t._v(" 五 constructor")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @name constructor示例\n * @description constructor 检测对象类型\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Boolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nul "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.log(nul.constructor); ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错：Uncaught TypeError: Cannot read property 'constructor' of null at <anonymous>:1:5")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" undefin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.log(undefin.constructor); ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 报错：Uncaught TypeError: Cannot read property 'constructor' of null at <anonymous>:1:5")]),t._v("\n")])])]),a("p",[a("code",[t._v("constructor")]),t._v(" 和前面的 "),a("code",[t._v("typeof")]),t._v("、"),a("code",[t._v("instanceof")]),t._v(" 不同，"),a("code",[t._v("typeof")]),t._v(" 和 "),a("code",[t._v("instanceof")]),t._v(" 是属于 "),a("strong",[t._v("表达式和运算符")]),t._v(" 分类下的，而 "),a("code",[t._v("constructor")]),t._v(" 是直接关系到内置对象 "),a("code",[t._v("Object")]),t._v(" 下。")]),t._v(" "),a("p",[t._v("当然，这里我们讲的是校验数据类型，通过 "),a("code",[t._v("[].constructor === Array")]),t._v(" 或者 "),a("code",[t._v("(1).constructor === Number")]),t._v(" 会返回 "),a("code",[t._v("true")]),t._v("，符合我们的预期。")]),t._v(" "),a("p",[t._v("但是很遗憾的表示，当你使用 "),a("code",[t._v("null.constructor")]),t._v(" 或者 "),a("code",[t._v("undefined.constructor")]),t._v(" 它会毫不留情的给你报："),a("code",[t._v("Uncaught TypeError: Cannot read property 'constructor' of null at <anonymous>:1:5")]),t._v("，所以我们也不能强行使用 "),a("code",[t._v("constructor")]),t._v(" 来做深拷贝时候的判断数据类型。")]),t._v(" "),a("h3",{attrs:{id:"六object-tostring-call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六object-tostring-call"}},[t._v("#")]),t._v(" 六Object.toString.call()")]),t._v(" "),a("p",[t._v("Object.prototype.toString.call()")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @name toString示例\n * @description toString 检测对象类型\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" toString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Date]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object String]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Math]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'feHuang'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object String]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Number]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Array]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Object]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Undefined]")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Null]")]),t._v("\n")])])]),a("p",[t._v("在前面三种心有余而力不足的情况下，"),a("code",[t._v("Object.prototype.toString.call()")]),t._v(" 就显得稳定而实用了。")]),t._v(" "),a("p",[t._v("如果你看过 jQuery 源码，你会发现它的数据类型检测也是通过这个实现的（"),a("code",[t._v("jQuery.type(obj)")]),t._v("）。")]),t._v(" "),a("p",[t._v("在检测数据类型方面，你不管检测 "),a("code",[t._v("Object.prototype.toString.call('aaa')")]),t._v("、"),a("code",[t._v("Object.prototype.toString.call(null)")]),t._v(" 亦或者 "),a("code",[t._v("Object.prototype.toString.call(undefined)")]),t._v(" 都能得到你要的类型格式："),a("code",[t._v("[object String]")]),t._v("、"),a("code",[t._v("[object Null]")]),t._v("、"),a("code",[t._v("[object Undefined]")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"七-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七-总结"}},[t._v("#")]),t._v(" 七 总结")]),t._v(" "),a("p",[t._v("如上，通过对比，我们得出结论，在进行 JavaScript 数据类型判断的时候，推荐使用：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Object.prototype.toString.call()")])])]),t._v(" "),a("p",[t._v("当然，写到这里，虽然我们的文章看起来可能简洁短小点，但是感觉讲出了这四种方法在判断数据类型上的优缺点。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("apply()")])]),t._v(" "),a("li",[a("code",[t._v("bind()")])]),t._v(" "),a("li",[a("code",[t._v("call()")])]),t._v(" "),a("li",[a("code",[t._v("apply()、bind() 以及 call() 的区别")])])]),t._v(" "),a("h1",{attrs:{id:"object-prototype-tostring方法的原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-tostring方法的原理"}},[t._v("#")]),t._v(" Object.prototype.toString方法的原理")]),t._v(" "),a("p",[t._v("在JavaScript中，想要判断某个对象值属于哪种内置类型，最靠谱的做法就是通过Object.prototype.toString方法.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"[object Array]"')]),t._v("\n")])])]),a("p",[t._v("本文要讲的就是，toString方法是如何做到这一点的，原理是什么.")]),t._v(" "),a("h3",{attrs:{id:"ecmascript-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript-3"}},[t._v("#")]),t._v(" ECMAScript 3")]),t._v(" "),a("p",[t._v("在"),a("a",{attrs:{href:"http://bclary.com/2004/11/07/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES3"),a("OutboundLink")],1),t._v("中，Object.prototype.toString方法的规范如下:")]),t._v(" "),a("blockquote",[a("p",[t._v("15.2.4.2 Object.prototype.toString()")]),t._v(" "),a("p",[t._v("在**"),a("code",[t._v("toString")]),a("strong",[t._v("方法被调用时，会执行下面的操作步骤:1. 获取this对象的[[Class]]属性的值.2. 计算出三个字符串")]),a("code",[t._v('"[object "，')]),t._v("** 第一步的操作结果Result(1)， 以及 "),a("strong",[a("code",[t._v('"]"')])]),a("code",[t._v("连接后的新字符串.")]),t._v("3. 返回第二步的操作结果Result(2).")])]),t._v(" "),a("p",[t._v("[[Class]]是一个内部属性，所有的对象(原生对象和宿主对象)都拥有该属性.在规范中，[[Class]]是这么定义的")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("内部属性")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("[[Class]]")]),t._v(" "),a("td",[t._v("一个字符串值,表明了该对象的类型.")])])])]),t._v(" "),a("p",[t._v("然后给了一段解释:")]),t._v(" "),a("blockquote",[a("p",[t._v("所有内置对象的[[Class]]属性的值是由本规范定义的.所有宿主对象的[[Class]]属性的值可以是任意值，甚至可以是内置对象使用过的[[Class]]属性的值.[[Class]]属性的值可以用来判断一个原生对象属于哪种内置类型.需要注意的是，除了通过**"),a("code",[t._v("Object.prototype.toString")]),t._v("**方法之外，本规范没有提供任何其他方式来让程序访问该属性的值(查看 15.2.4.2).")])]),t._v(" "),a("p",[t._v("也就是说，把Object.prototype.toString方法返回的字符串，去掉前面固定的**"),a("code",[t._v('"[object "')]),a("strong",[t._v("和后面固定的")]),t._v('"]"，**就是内部属性[[class]]的值，也就达到了判断对象类型的目的.jQuery中的工具方法$.type()，就是干这个的.')]),t._v(" "),a("p",[t._v("在ES3中，规范文档并没有总结出[[class]]内部属性一共有几种，不过我们可以自己统计一下，原生对象的[[class]]内部属性的值一共有10种.分别是:"),a("code",[t._v('"Array"')]),t._v("， "),a("code",[t._v('"Boolean"')]),t._v("， "),a("code",[t._v('"Date"')]),t._v("， "),a("code",[t._v('"Error"')]),t._v("， "),a("code",[t._v('"Function"')]),t._v("， "),a("code",[t._v('"Math"')]),t._v("， "),a("code",[t._v('"Number"')]),t._v("， "),a("code",[t._v('"Object"')]),t._v("， "),a("code",[t._v('"RegExp"')]),t._v("， "),a("code",[t._v('"String".')])]),t._v(" "),a("h3",{attrs:{id:"ecmascript-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript-5"}},[t._v("#")]),t._v(" ECMAScript 5")]),t._v(" "),a("p",[t._v("在"),a("a",{attrs:{href:"http://ecma-international.org/ecma-262/5.1",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES5.1"),a("OutboundLink")],1),t._v("中，除了规范写的更详细一些以外，Object.prototype.toString方法和[[class]]内部属性的定义上也有一些变化，Object.prototype.toString方法的规范如下:")]),t._v(" "),a("blockquote",[a("h5",{attrs:{id:"_15-2-4-2-object-prototype-tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-2-4-2-object-prototype-tostring"}},[t._v("#")]),t._v(" 15.2.4.2 Object.prototype.toString ( )")]),t._v(" "),a("p",[t._v("在**"),a("code",[t._v("toString")]),t._v("**方法被调用时，会执行下面的操作步骤:")]),t._v(" "),a("ol",[a("li",[t._v("如果"),a("strong",[t._v("this")]),t._v("的值为"),a("strong",[t._v("undefined")]),t._v("，则返回"),a("code",[t._v('"[object Undefined]"')]),t._v(".")]),t._v(" "),a("li",[t._v("如果"),a("strong",[t._v("this")]),t._v("的值为"),a("strong",[t._v("null")]),t._v("，则返回"),a("code",[t._v('"[object Null]"')]),t._v(".")]),t._v(" "),a("li",[t._v("让"),a("em",[t._v("O")]),t._v("成为调用ToObject(**this)**的结果.")]),t._v(" "),a("li",[t._v("让"),a("em",[t._v("class")]),t._v("成为"),a("em",[t._v("O")]),t._v("的内部属性[[Class]]的值.")]),t._v(" "),a("li",[t._v("返回三个字符串**"),a("code",[t._v('"[object "，')]),t._v("** "),a("em",[t._v("class")]),t._v("， 以及 "),a("strong",[a("code",[t._v('"]"')])]),t._v("`连接后的新字符串```.")])])]),t._v(" "),a("p",[t._v('可以看出，比ES3多了1，2，3步.第1，2步属于新规则，比较特殊，因为"'),a("code",[t._v('Undefined"')]),t._v('和"'),a("code",[t._v('Null"')]),t._v("并不属于[[class]]属性的值，需要注意的是，这里和严格模式无关(大部分函数在严格模式下，this的值才会保持undefined或null，非严格模式下会自动成为全局对象).第3步并不算是新规则，因为在ES3的引擎中，也都会在这一步将三种原始值类型转换成对应的包装对象，只是规范中没写出来.ES5中，[[Class]]属性的解释更加详细:")]),t._v(" "),a("blockquote",[a("p",[t._v('所有内置对象的[[Class]]属性的值是由本规范定义的.所有宿主对象的[[Class]]属性的值可以是除了"Arguments"， "Array"， "Boolean"， "Date"， "Error"， "Function"， "JSON"， "Math"， "Number"， "Object"， "RegExp"， "String"之外的的任何字符串.[[Class]]内部属性是引擎内部用来判断一个对象属于哪种类型的值的.需要注意的是，除了通过**'),a("code",[t._v("Object.prototype.toString")]),t._v("**方法之外，本规范没有提供任何其他方式来让程序访问该属性的值(查看 15.2.4.2).")])]),t._v(" "),a("p",[t._v('和ES3对比一下，第一个差别就是[[class]]内部属性的值多了两种，成了12种，一种是arguments对象的[[class]]成了"Arguments"，而不是以前的"Object"，还有就是多个了全局对象JSON，它的[[class]]值为"JSON".第二个差别就是，宿主对象的[[class]]内部属性的值，不能和这12种值冲突，不过在支持ES3的浏览器中，貌似也没有发现哪些宿主对象故意使用那10个值.')]),t._v(" "),a("h3",{attrs:{id:"ecmascript-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript-6"}},[t._v("#")]),t._v(" ECMAScript 6")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://people.mozilla.org/~jorendorff/es6-draft.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES6"),a("OutboundLink")],1),t._v("目前还只是工作草案，但能够肯定的是，"),a("strong",[t._v("[[class]]内部属性没有了")]),t._v("，取而代之的是另外一个内部属性[[NativeBrand]].[[NativeBrand]]属性是这么定义的:")]),t._v(" "),a("blockquote",[a("table",[a("thead",[a("tr",[a("th",[t._v("内部属性")]),t._v(" "),a("th",[t._v("属性值")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("[[NativeBrand]]")]),t._v(" "),a("td",[t._v("枚举NativeBrand的一个成员.")]),t._v(" "),a("td",[t._v("该属性的值对应一个标志值(tag value),可以用来区分原生对象的类型.")])])])])]),t._v(" "),a("p",[t._v("[[NativeBrand]]属性的解释:")]),t._v(" "),a("blockquote",[a("p",[t._v("[[NativeBrand]]内部属性用来识别某个原生对象是否为符合本规范的某一种特定类型的对象.[[NativeBrand]]内部属性的值为下面这些枚举类型的值中的一个:NativeFunction， NativeArray， StringWrapper， BooleanWrapper， NumberWrapper， NativeMath， NativeDate， NativeRegExp， NativeError， NativeJSON， NativeArguments， NativePrivateName.[[NativeBrand]]内部属性仅用来区分区分特定类型的ECMAScript原生对象.只有在表10中明确指出的对象类型才有[[NativeBrand]]内部属性.")]),t._v(" "),a("p",[t._v("表10 — [[NativeBrand]]内部属性的值")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性值")]),t._v(" "),a("th",[t._v("对应类型")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("NativeFunction")]),t._v(" "),a("td",[t._v("Function objects")])]),t._v(" "),a("tr",[a("td",[t._v("NativeArray")]),t._v(" "),a("td",[t._v("Array objects")])]),t._v(" "),a("tr",[a("td",[t._v("StringWrapper")]),t._v(" "),a("td",[t._v("String objects")])]),t._v(" "),a("tr",[a("td",[t._v("BooleanWrapper")]),t._v(" "),a("td",[t._v("Boolean objects")])]),t._v(" "),a("tr",[a("td",[t._v("NumberWrapper")]),t._v(" "),a("td",[t._v("Number objects")])]),t._v(" "),a("tr",[a("td",[t._v("NativeMath")]),t._v(" "),a("td",[t._v("The Math object")])]),t._v(" "),a("tr",[a("td",[t._v("NativeDate")]),t._v(" "),a("td",[t._v("Date objects")])]),t._v(" "),a("tr",[a("td",[t._v("NativeRegExp")]),t._v(" "),a("td",[t._v("RegExp objects")])]),t._v(" "),a("tr",[a("td",[t._v("NativeError")]),t._v(" "),a("td",[t._v("Error objects")])]),t._v(" "),a("tr",[a("td",[t._v("NativeJSON")]),t._v(" "),a("td",[t._v("The JSON object")])]),t._v(" "),a("tr",[a("td",[t._v("NativeArguments")]),t._v(" "),a("td",[t._v("Arguments objects")])]),t._v(" "),a("tr",[a("td",[t._v("NativePrivateName")]),t._v(" "),a("td",[t._v("Private Name objects")])])])])]),t._v(" "),a("p",[t._v("可见，和[[class]]不同的是，并不是每个对象都拥有[[NativeBrand]].同时，Object.prototype.toString方法的规范也改成了下面这样:")]),t._v(" "),a("blockquote",[a("h5",{attrs:{id:"_15-2-4-2-object-prototype-tostring-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-2-4-2-object-prototype-tostring-2"}},[t._v("#")]),t._v(" 15.2.4.2 Object.prototype.toString ( )")]),t._v(" "),a("p",[t._v("在**"),a("code",[t._v("toString")]),t._v("**方法被调用时，会执行下面的操作步骤:")]),t._v(" "),a("ol",[a("li",[t._v("如果"),a("strong",[t._v("this")]),t._v("的值为"),a("strong",[t._v("undefined")]),t._v("，则返回"),a("code",[t._v('"[object Undefined]"')]),t._v(".")]),t._v(" "),a("li",[t._v("``如果"),a("strong",[t._v("this")]),t._v("的值为"),a("strong",[t._v("null")]),t._v("，则返回"),a("code",[t._v('"[object Null]"')]),t._v(".")]),t._v(" "),a("li",[t._v("让"),a("em",[t._v("O")]),t._v("成为调用ToObject(**this)**的结果.")]),t._v(" "),a("li",[t._v("如果"),a("em",[t._v("O")]),t._v("有[[NativeBrand]]内部属性，让"),a("em",[t._v("tag")]),t._v("成为表29中对应的值.")]),t._v(" "),a("li",[t._v("否则\n"),a("ol",[a("li",[t._v("让"),a("em",[t._v("hasTag")]),t._v("成为调用"),a("em",[t._v("O")]),t._v("的[[HasProperty]]内部方法后的结果，参数为@@toStringTag.")]),t._v(" "),a("li",[t._v("如果"),a("em",[t._v("hasTag")]),t._v("为"),a("strong",[t._v("false")]),t._v("，则让"),a("em",[t._v("tag")]),t._v("为"),a("code",[t._v('"Object"')]),t._v(".")]),t._v(" "),a("li",[t._v("否则，\n"),a("ol",[a("li",[t._v("让"),a("em",[t._v("tag")]),t._v("成为调用"),a("em",[t._v("O")]),t._v("的[[Get]]内部方法后的结果，参数为@@toStringTag.")]),t._v(" "),a("li",[t._v("如果"),a("em",[t._v("tag")]),t._v("是一个abrupt completion，则让"),a("em",[t._v("tag")]),t._v("成为NormalCompletion("),a("code",[t._v('"???"')]),t._v(").")]),t._v(" "),a("li",[t._v("让"),a("em",[t._v("tag")]),t._v("成为"),a("em",[t._v("tag")]),t._v(".[[value]].")]),t._v(" "),a("li",[t._v("如果Type("),a("em",[t._v("tag")]),t._v(")不是字符串，则让"),a("em",[t._v("tag成为")]),a("code",[t._v('"???"')]),t._v(".")]),t._v(" "),a("li",[t._v("如果"),a("em",[t._v("tag")]),t._v("的值为"),a("code",[t._v('"Arguments"')]),t._v("， "),a("code",[t._v('"Array"')]),t._v("， "),a("code",[t._v('"Boolean"')]),t._v("， "),a("code",[t._v('"Date"')]),t._v("， "),a("code",[t._v('"Error"')]),t._v("， "),a("code",[t._v('"Function"')]),t._v("， "),a("code",[t._v('"JSON"')]),t._v("， "),a("code",[t._v('"Math"')]),t._v("， "),a("code",[t._v('"Number"')]),t._v("， "),a("code",[t._v('"Object"')]),t._v("， "),a("code",[t._v('"RegExp"')]),t._v("，"),a("code",[t._v('或者"String"中的任一个，则让')]),a("em",[t._v("tag")]),t._v("成为字符串"),a("code",[t._v('"~"和')]),a("em",[t._v("tag")]),t._v("当前的值连接后的结果.")])])])])]),t._v(" "),a("li",[t._v('返回三个字符串"[object "， tag， and "]"`连接后的新字符串```.')])]),t._v(" "),a("p",[t._v("表29 — [[NativeBrand]] 标志值")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("[[NativeBrand]]值")]),t._v(" "),a("th",[t._v("标志值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("NativeFunction")]),t._v(" "),a("td",[a("code",[t._v('"Function"')])])]),t._v(" "),a("tr",[a("td",[t._v("NativeArray")]),t._v(" "),a("td",[a("code",[t._v('"Array"')])])]),t._v(" "),a("tr",[a("td",[t._v("StringWrapper")]),t._v(" "),a("td",[a("code",[t._v('"String"')])])]),t._v(" "),a("tr",[a("td",[t._v("BooleanWrapper")]),t._v(" "),a("td",[a("code",[t._v('"Boolean"')])])]),t._v(" "),a("tr",[a("td",[t._v("NumberWrapper")]),t._v(" "),a("td",[a("code",[t._v('"Number"')])])]),t._v(" "),a("tr",[a("td",[t._v("NativeMath")]),t._v(" "),a("td",[a("code",[t._v('"Math"')])])]),t._v(" "),a("tr",[a("td",[t._v("NativeDate")]),t._v(" "),a("td",[a("code",[t._v('"Date"')])])]),t._v(" "),a("tr",[a("td",[t._v("NativeRegExp")]),t._v(" "),a("td",[a("code",[t._v('"RegExp"')])])]),t._v(" "),a("tr",[a("td",[t._v("NativeError")]),t._v(" "),a("td",[a("code",[t._v('"Error"')])])]),t._v(" "),a("tr",[a("td",[t._v("NativeJSON")]),t._v(" "),a("td",[a("code",[t._v('"JSON"')])])]),t._v(" "),a("tr",[a("td",[t._v("NativeArguments")]),t._v(" "),a("td",[a("code",[t._v('"Arguments"')])])])])])]),t._v(" "),a("p",[t._v("可以看到，在规范上有了很大的变化，不过对于普通用户来说，貌似感觉不到.")]),t._v(" "),a("p",[t._v("也许你发现了，ES6里的新类型Map，Set等，都没有在表29中.它们在执行toString方法的时候返回的是什么?")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('console.log(Object.prototype.toString.call(Map()))   //"[object Map]"\n\nconsole.log(Object.prototype.toString.call(Set()))   //"[object Set]"\n')])])]),a("p",[t._v('其中的字符串"Map"是怎么来的呢:')]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("15.14.5.13")]),t._v(" Map.prototype.@@toStringTag")]),t._v(" "),a("p",[t._v('@@toStringTag 属性的初始值为字符串**"Map"**.')])]),t._v(" "),a("p",[t._v("由于ES6的规范还在制定中，各种相关规定都有可能改变，所以如果想了解更多细节.看看下面这两个链接，现在只需要知道的是:[[class]]没了，使用了更复杂的机制.")]),t._v(" "),a("p",[t._v("http://stackoverflow.com/questions/13151643/access-nativebrand-class-in-es6-ecmascript-6")]),t._v(" "),a("p",[t._v("https://mail.mozilla.org/pipermail/es-discuss/2012-June/023676.html")])])}),[],!1,null,null,null);s.default=e.exports}}]);